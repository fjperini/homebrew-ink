--- src/carbon_integration/osx-integration.h	(before formatting)
+++ src/carbon_integration/osx-integration.h	(after formatting)
@@ -15,28 +15,28 @@
  * Released under GNU GPL, read the file 'COPYING' for more information
  */

+#include "widgets/desktop-widget.h"
 #include <gtkmacintegration/gtkosxapplication.h>
-#include "widgets/desktop-widget.h"

 #ifdef __cplusplus
 extern "C" {
 #endif /* __cplusplus */

 typedef struct _InkscapeOsxIntegration {
-	GtkosxApplication *pGtkOsxApplication;
-	GtkWidget *menubar;
-	GtkWidget *about_item, *prefs_item;
-	SPDesktopWidget *dtw_infocus;
-
+    GtkosxApplication *pGtkOsxApplication;
+    GtkWidget *menubar;
+    GtkWidget *about_item, *prefs_item;
+    SPDesktopWidget *dtw_infocus;
+
 } InkscapeOsxIntegration;


 extern InkscapeOsxIntegration sInkscapeOsxIntegration;
 extern GtkWidget *osx_integration_menuitems[4];

-void OSX_set_menubar( SPDesktopWidget *menubar);
-void   init_Mac_OSX_Integration();
-void   init_Mac_OSX_Integration_complete();
+void OSX_set_menubar(SPDesktopWidget *menubar);
+void init_Mac_OSX_Integration();
+void init_Mac_OSX_Integration_complete();

 #ifdef __cplusplus
 }
--- src/object/sp-ellipse.cpp	(before formatting)
+++ src/object/sp-ellipse.cpp	(after formatting)
@@ -502,13 +502,12 @@

 Geom::Affine SPGenericEllipse::set_transform(Geom::Affine const &xform)
 {
-    if (hasPathEffect() && pathEffectsEnabled() &&
-        (this->hasPathEffectOfType(Inkscape::LivePathEffect::CLONE_ORIGINAL) ||
-         this->hasPathEffectOfType(Inkscape::LivePathEffect::BEND_PATH) ||
-         this->hasPathEffectOfType(Inkscape::LivePathEffect::POWERCLIP) ||
+    if (hasPathEffect() && pathEffectsEnabled() &&
+        (this->hasPathEffectOfType(Inkscape::LivePathEffect::CLONE_ORIGINAL) ||
+         this->hasPathEffectOfType(Inkscape::LivePathEffect::BEND_PATH) ||
+         this->hasPathEffectOfType(Inkscape::LivePathEffect::POWERCLIP) ||
          this->hasPathEffectOfType(Inkscape::LivePathEffect::FILL_BETWEEN_MANY) ||
-         this->hasPathEffectOfType(Inkscape::LivePathEffect::FILL_BETWEEN_STROKES) ) )
-    {
+         this->hasPathEffectOfType(Inkscape::LivePathEffect::FILL_BETWEEN_STROKES))) {
         // if path has this LPE applied, don't write the transform to the pathdata, but write it 'unoptimized'
         // also if the effect is type BEND PATH to fix bug #179842
         this->adjust_livepatheffect(xform);
--- src/live_effects/lpe-fill-between-strokes.cpp	(before formatting)
+++ src/live_effects/lpe-fill-between-strokes.cpp	(after formatting)
@@ -14,15 +14,16 @@
 namespace Inkscape {
 namespace LivePathEffect {

-LPEFillBetweenStrokes::LPEFillBetweenStrokes(LivePathEffectObject *lpeobject) :
-    Effect(lpeobject),
-    linked_path(_("Linked path:"), _("Path from which to take the original path data"), "linkedpath", &wr, this),
-    second_path(_("Second path:"), _("Second path from which to take the original path data"), "secondpath", &wr, this),
-    reverse_second(_("Reverse Second"), _("Reverses the second path order"), "reversesecond", &wr, this),
-    fuse(_("Fuse coincident points"), _("Fuse coincident points"), "fuse", &wr, this, false),
-    allow_transforms(_("Allow transforms"), _("Allow transforms"), "allow_transforms", &wr, this, false),
-    join(_("Join subpaths"), _("Join subpaths"), "join", &wr, this, true),
-    close(_("Close"), _("Close path"), "close", &wr, this, true)
+LPEFillBetweenStrokes::LPEFillBetweenStrokes(LivePathEffectObject *lpeobject)
+    : Effect(lpeobject)
+    , linked_path(_("Linked path:"), _("Path from which to take the original path data"), "linkedpath", &wr, this)
+    , second_path(_("Second path:"), _("Second path from which to take the original path data"), "secondpath", &wr,
+                  this)
+    , reverse_second(_("Reverse Second"), _("Reverses the second path order"), "reversesecond", &wr, this)
+    , fuse(_("Fuse coincident points"), _("Fuse coincident points"), "fuse", &wr, this, false)
+    , allow_transforms(_("Allow transforms"), _("Allow transforms"), "allow_transforms", &wr, this, false)
+    , join(_("Join subpaths"), _("Join subpaths"), "join", &wr, this, true)
+    , close(_("Close"), _("Close path"), "close", &wr, this, true)
 {
     registerParameter(&linked_path);
     registerParameter(&second_path);
@@ -40,7 +41,7 @@
 {
     if (curve) {
         Geom::Affine affine = Geom::identity();
-        if(!allow_transforms) {
+        if (!allow_transforms) {
             SP_ITEM(sp_lpe_item)->setAttribute("transform", nullptr);
         }
         if ( linked_path.linksToPath() && second_path.linksToPath() && linked_path.getObject() && second_path.getObject() ) {
--- src/live_effects/lpe-bendpath.h	(before formatting)
+++ src/live_effects/lpe-bendpath.h	(after formatting)
@@ -44,9 +44,9 @@
     void resetDefaults(SPItem const* item) override;

     void addCanvasIndicators(SPLPEItem const */*lpeitem*/, std::vector<Geom::PathVector> &hp_vec) override;
-
-    void transform_multiply(Geom::Affine const& postmul, bool set) override;
-
+
+    void transform_multiply(Geom::Affine const &postmul, bool set) override;
+
     void addKnotHolderEntities(KnotHolder * knotholder, SPItem * item) override;

     PathParam bend_path;
--- src/object/sp-item.cpp	(before formatting)
+++ src/object/sp-item.cpp	(after formatting)
@@ -1516,7 +1516,6 @@
         if (freeze_stroke_width) {
             freeze_stroke_width_recursive(false);
         }
-
     } else {
         if (lpeitem && lpeitem->hasPathEffectRecursive()) {
             lpeitem->adjust_livepatheffect(transform_attr);
--- src/object/sp-star.cpp	(before formatting)
+++ src/object/sp-star.cpp	(after formatting)
@@ -494,13 +494,12 @@
 Geom::Affine SPStar::set_transform(Geom::Affine const &xform)
 {
     bool opt_trans = (randomized == 0);
-    if (hasPathEffect() && pathEffectsEnabled() &&
-        (this->hasPathEffectOfType(Inkscape::LivePathEffect::CLONE_ORIGINAL) ||
-         this->hasPathEffectOfType(Inkscape::LivePathEffect::BEND_PATH) ||
-         this->hasPathEffectOfType(Inkscape::LivePathEffect::POWERCLIP) ||
+    if (hasPathEffect() && pathEffectsEnabled() &&
+        (this->hasPathEffectOfType(Inkscape::LivePathEffect::CLONE_ORIGINAL) ||
+         this->hasPathEffectOfType(Inkscape::LivePathEffect::BEND_PATH) ||
+         this->hasPathEffectOfType(Inkscape::LivePathEffect::POWERCLIP) ||
          this->hasPathEffectOfType(Inkscape::LivePathEffect::FILL_BETWEEN_MANY) ||
-         this->hasPathEffectOfType(Inkscape::LivePathEffect::FILL_BETWEEN_STROKES) ) )
-    {
+         this->hasPathEffectOfType(Inkscape::LivePathEffect::FILL_BETWEEN_STROKES))) {
         // if path has this LPE applied, don't write the transform to the pathdata, but write it 'unoptimized'
         // also if the effect is type BEND PATH to fix bug #179842
         this->adjust_livepatheffect(xform);
--- src/object/sp-spiral.cpp	(before formatting)
+++ src/object/sp-spiral.cpp	(after formatting)
@@ -408,13 +408,12 @@
  */
 Geom::Affine SPSpiral::set_transform(Geom::Affine const &xform)
 {
-    if (hasPathEffect() && pathEffectsEnabled() &&
-        (this->hasPathEffectOfType(Inkscape::LivePathEffect::CLONE_ORIGINAL) ||
-         this->hasPathEffectOfType(Inkscape::LivePathEffect::BEND_PATH) ||
-         this->hasPathEffectOfType(Inkscape::LivePathEffect::POWERCLIP) ||
+    if (hasPathEffect() && pathEffectsEnabled() &&
+        (this->hasPathEffectOfType(Inkscape::LivePathEffect::CLONE_ORIGINAL) ||
+         this->hasPathEffectOfType(Inkscape::LivePathEffect::BEND_PATH) ||
+         this->hasPathEffectOfType(Inkscape::LivePathEffect::POWERCLIP) ||
          this->hasPathEffectOfType(Inkscape::LivePathEffect::FILL_BETWEEN_MANY) ||
-         this->hasPathEffectOfType(Inkscape::LivePathEffect::FILL_BETWEEN_STROKES) ) )
-    {
+         this->hasPathEffectOfType(Inkscape::LivePathEffect::FILL_BETWEEN_STROKES))) {
         // if path has this LPE applied, don't write the transform to the pathdata, but write it 'unoptimized'
         // also if the effect is type BEND PATH to fix bug #179842
         this->adjust_livepatheffect(xform);
--- src/live_effects/lpe-fill-between-many.cpp	(before formatting)
+++ src/live_effects/lpe-fill-between-many.cpp	(after formatting)
@@ -30,15 +30,15 @@
 };
 static const Util::EnumDataConverter<Filllpemethod> FLMConverter(FilllpemethodData, FLM_END);

-LPEFillBetweenMany::LPEFillBetweenMany(LivePathEffectObject *lpeobject) :
-    Effect(lpeobject),
-    linked_paths(_("Linked path:"), _("Paths from which to take the original path data"), "linkedpaths", &wr, this),
-    method(_("LPE's on linked:"), _("LPE's on linked"), "method", FLMConverter, &wr, this, FLM_BSPLINESPIRO),
-    fuse(_("Fuse coincident points"), _("Fuse coincident points"), "fuse", &wr, this, false),
-    allow_transforms(_("Allow transforms"), _("Allow transforms"), "allow_transforms", &wr, this, false),
-    join(_("Join subpaths"), _("Join subpaths"), "join", &wr, this, true),
-    close(_("Close"), _("Close path"), "close", &wr, this, true),
-    applied("Store the first apply", "", "applied", &wr, this, "false", false)
+LPEFillBetweenMany::LPEFillBetweenMany(LivePathEffectObject *lpeobject)
+    : Effect(lpeobject)
+    , linked_paths(_("Linked path:"), _("Paths from which to take the original path data"), "linkedpaths", &wr, this)
+    , method(_("LPE's on linked:"), _("LPE's on linked"), "method", FLMConverter, &wr, this, FLM_BSPLINESPIRO)
+    , fuse(_("Fuse coincident points"), _("Fuse coincident points"), "fuse", &wr, this, false)
+    , allow_transforms(_("Allow transforms"), _("Allow transforms"), "allow_transforms", &wr, this, false)
+    , join(_("Join subpaths"), _("Join subpaths"), "join", &wr, this, true)
+    , close(_("Close"), _("Close path"), "close", &wr, this, true)
+    , applied("Store the first apply", "", "applied", &wr, this, "false", false)
 {
     registerParameter(&linked_paths);
     registerParameter(&method);
@@ -145,11 +145,11 @@
             }
         }
     }
-
-    if(!allow_transforms) {
+
+    if (!allow_transforms) {
         SP_ITEM(sp_lpe_item)->setAttribute("transform", nullptr);
     }
-
+
     if (!res_pathv.empty() && close) {
         res_pathv.front().close();
     }
--- src/carbon_integration/osx-glue.m	(before formatting)
+++ src/carbon_integration/osx-glue.m	(after formatting)
@@ -1,20 +1,23 @@
+#include <CoreServices/CoreServices.h>
 #include <Foundation/Foundation.h>
-#include <CoreServices/CoreServices.h>

-char *convert_mimetype(const char *mimetype) {
-	char *ret;
-	NSString *str = [[NSString alloc] initWithUTF8String:mimetype];
-        CFStringRef uti = UTTypeCreatePreferredIdentifierForTag(kUTTagClassMIMEType, (CFStringRef)str, NULL);
-        ret =  [(NSString *)uti UTF8String];
-        [str release];
-        return ret;
+char *convert_mimetype(const char *mimetype)
+{
+    char *ret;
+    NSString *str = [[NSString alloc] initWithUTF8String:mimetype];
+    CFStringRef uti = UTTypeCreatePreferredIdentifierForTag(kUTTagClassMIMEType, (CFStringRef)str, NULL);
+    ret = [(NSString *)uti UTF8String];
+    [str release];
+    return ret;
 }


-char *convert_uti(const char *uti) {
-	char *ret = NULL;
-	NSString *str = (NSString *)UTTypeCopyPreferredTagWithClass((CFStringRef)[[NSString alloc] initWithUTF8String:uti], kUTTagClassMIMEType);
-	ret = [str UTF8String];
-	[str release];
-	return ret;
+char *convert_uti(const char *uti)
+{
+    char *ret = NULL;
+    NSString *str = (NSString *)UTTypeCopyPreferredTagWithClass((CFStringRef)[[NSString alloc] initWithUTF8String:uti],
+                                                                kUTTagClassMIMEType);
+    ret = [str UTF8String];
+    [str release];
+    return ret;
 }--- src/carbon_integration/osx-integration.cpp	(before formatting)
+++ src/carbon_integration/osx-integration.cpp	(after formatting)
@@ -13,83 +13,73 @@
  */
 #ifdef __APPLE__

+#include "osx-integration.h"
 #include <gtkmacintegration/gtkosxapplication.h>
-#include "osx-integration.h"

+#include <file.h>
 #include <ui/interface.h>
-#include <file.h>

 #ifdef __cplusplus
 // extern "C" {
 #endif /* __cplusplus */

-static gboolean
-osx_quartz_quit (GtkosxApplication *app, gpointer data);
-static gboolean
-osx_quartz_block_termination (GtkosxApplication *app, gpointer data);
+static gboolean osx_quartz_quit(GtkosxApplication *app, gpointer data);
+static gboolean osx_quartz_block_termination(GtkosxApplication *app, gpointer data);

-InkscapeOsxIntegration sInkscapeOsxIntegration = {0};
+InkscapeOsxIntegration sInkscapeOsxIntegration = { 0 };

 GtkWidget *osx_integration_menuitems[4];

-static gboolean
-osx_quartz_block_termination (GtkosxApplication *app, gpointer data)
+static gboolean osx_quartz_block_termination(GtkosxApplication *app, gpointer data) { return !sp_ui_close_all(); }
+
+
+static gboolean osx_quartz_quit(GtkosxApplication *app, gpointer data)
 {
-	return !sp_ui_close_all();
+    sp_ui_close_all();
+    g_print("Got here");
+    gtk_main_quit();
+    return FALSE;
+}
+
+static gboolean osx_open_file(GtkosxApplication *app, gchar *path, gpointer data)
+{
+    Glib::ustring ustr = Glib::ustring(path);
+    sp_file_open(ustr, NULL, true, false);
+    return true;
 }


-static gboolean
-osx_quartz_quit (GtkosxApplication *app, gpointer data)
+void init_Mac_OSX_Integration()
 {
-	sp_ui_close_all();
-	g_print("Got here");
-	gtk_main_quit();
-	return FALSE;
+    sInkscapeOsxIntegration.pGtkOsxApplication = (GtkosxApplication *)g_object_new(GTKOSX_TYPE_APPLICATION, NULL);
+    // gtkosx_application_set_use_quartz_accelerators(sInkscapeOsxIntegration.pGtkOsxApplication, FALSE);
 }

-static gboolean
-osx_open_file (GtkosxApplication *app, gchar *path ,gpointer data)
+void init_Mac_OSX_Integration_complete()
 {
-	Glib::ustring ustr = Glib::ustring(path);
-	sp_file_open(ustr, NULL, true, false);
-	return true;
+    gtkosx_application_ready(sInkscapeOsxIntegration.pGtkOsxApplication);
+    g_signal_connect(sInkscapeOsxIntegration.pGtkOsxApplication, "NSApplicationBlockTermination",
+                     G_CALLBACK(osx_quartz_block_termination), NULL);
+    g_signal_connect(sInkscapeOsxIntegration.pGtkOsxApplication, "NSApplicationWillTerminate",
+                     G_CALLBACK(osx_quartz_block_termination), NULL);
+    g_signal_connect(sInkscapeOsxIntegration.pGtkOsxApplication, "NSApplicationOpenFile", G_CALLBACK(osx_open_file),
+                     NULL);
+    gtk_accel_map_save("/tmp/inkscape.map");
 }

-
-void   init_Mac_OSX_Integration() {
-	sInkscapeOsxIntegration.pGtkOsxApplication  = (GtkosxApplication*) g_object_new(GTKOSX_TYPE_APPLICATION, NULL);
-	//gtkosx_application_set_use_quartz_accelerators(sInkscapeOsxIntegration.pGtkOsxApplication, FALSE);
-}
+void OSX_set_menubar(SPDesktopWidget *dtw)
+{
+    gtkosx_application_set_menu_bar(sInkscapeOsxIntegration.pGtkOsxApplication, GTK_MENU_SHELL(dtw->menubar));

-void   init_Mac_OSX_Integration_complete() {
-	gtkosx_application_ready(sInkscapeOsxIntegration.pGtkOsxApplication);
-	g_signal_connect(sInkscapeOsxIntegration.pGtkOsxApplication, "NSApplicationBlockTermination",
-	                 G_CALLBACK(osx_quartz_block_termination), NULL);
-	g_signal_connect(sInkscapeOsxIntegration.pGtkOsxApplication, "NSApplicationWillTerminate",
-	                 G_CALLBACK(osx_quartz_block_termination), NULL);
-	g_signal_connect(sInkscapeOsxIntegration.pGtkOsxApplication, "NSApplicationOpenFile",
-	                 G_CALLBACK(osx_open_file), NULL);
-	gtk_accel_map_save("/tmp/inkscape.map");
-}
-
-void OSX_set_menubar(SPDesktopWidget *dtw) {
-        gtkosx_application_set_menu_bar(sInkscapeOsxIntegration.pGtkOsxApplication, GTK_MENU_SHELL (dtw->menubar));
-
-        if (dtw->about_item) {
-            GtkWidget *sep = gtk_separator_menu_item_new();
-            gtkosx_application_insert_app_menu_item  (sInkscapeOsxIntegration.pGtkOsxApplication,
-                                                      dtw->about_item,
-                                                      0);
-            g_object_ref(sep);
-            gtkosx_application_insert_app_menu_item  (sInkscapeOsxIntegration.pGtkOsxApplication, sep, 1);
-        }
-        if (dtw->prefs_item) {
-            gtkosx_application_insert_app_menu_item  (sInkscapeOsxIntegration.pGtkOsxApplication,
-                                                      dtw->prefs_item,
-                                                      2);
-        }
-
+    if (dtw->about_item) {
+        GtkWidget *sep = gtk_separator_menu_item_new();
+        gtkosx_application_insert_app_menu_item(sInkscapeOsxIntegration.pGtkOsxApplication, dtw->about_item, 0);
+        g_object_ref(sep);
+        gtkosx_application_insert_app_menu_item(sInkscapeOsxIntegration.pGtkOsxApplication, sep, 1);
+    }
+    if (dtw->prefs_item) {
+        gtkosx_application_insert_app_menu_item(sInkscapeOsxIntegration.pGtkOsxApplication, dtw->prefs_item, 2);
+    }
 }

 #ifdef __cplusplus
--- src/object/sp-path.cpp	(before formatting)
+++ src/object/sp-path.cpp	(after formatting)
@@ -328,12 +328,11 @@
     }
     // Transform the original-d path if this is a valid LPE this, other else the (ordinary) path
     if (_curve_before_lpe && hasPathEffectRecursive()) {
-        if (this->hasPathEffectOfType(Inkscape::LivePathEffect::CLONE_ORIGINAL) ||
-            this->hasPathEffectOfType(Inkscape::LivePathEffect::BEND_PATH) ||
-            this->hasPathEffectOfType(Inkscape::LivePathEffect::POWERCLIP) ||
+        if (this->hasPathEffectOfType(Inkscape::LivePathEffect::CLONE_ORIGINAL) ||
+            this->hasPathEffectOfType(Inkscape::LivePathEffect::BEND_PATH) ||
+            this->hasPathEffectOfType(Inkscape::LivePathEffect::POWERCLIP) ||
             this->hasPathEffectOfType(Inkscape::LivePathEffect::FILL_BETWEEN_MANY) ||
-            this->hasPathEffectOfType(Inkscape::LivePathEffect::FILL_BETWEEN_STROKES) )
-        {
+            this->hasPathEffectOfType(Inkscape::LivePathEffect::FILL_BETWEEN_STROKES)) {
             // if path has this LPE applied, don't write the transform to the pathdata, but write it 'unoptimized'
             // also if the effect is type BEND PATH to fix bug #179842
             this->adjust_livepatheffect(transform);
--- src/live_effects/lpe-bendpath.cpp	(before formatting)
+++ src/live_effects/lpe-bendpath.cpp	(after formatting)
@@ -164,10 +164,9 @@
     bend_path.set_new_value( path.toPwSb(), true );
 }

-void
-LPEBendPath::transform_multiply(Geom::Affine const& postmul, bool set)
-{
-    //block parameters be transformed because shapes with bend store transform in the element
+void LPEBendPath::transform_multiply(Geom::Affine const &postmul, bool set)
+{
+    // block parameters be transformed because shapes with bend store transform in the element
 }

 void
