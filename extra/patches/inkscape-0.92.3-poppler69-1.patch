diff --git a/src/extension/internal/pdfinput/pdf-input.cpp b/src/extension/internal/pdfinput/pdf-input.cpp
index e311562..21a91fa 100644
--- a/src/extension/internal/pdfinput/pdf-input.cpp
+++ b/src/extension/internal/pdfinput/pdf-input.cpp
@@ -31,7 +31,6 @@
 #include <poppler/glib/poppler-page.h>
 #endif

-#include <gtkmm/alignment.h>
 #include <gtkmm/checkbutton.h>
 #include <gtkmm/comboboxtext.h>
 #include <gtkmm/drawingarea.h>
@@ -39,10 +38,14 @@
 #include <gtkmm/radiobutton.h>
 #include <gtkmm/scale.h>

-#if WITH_GTKMM_3_0
 #include <glibmm/convert.h>
 #include <glibmm/miscutils.h>
-#endif
+#include <gtk/gtk.h>
+#include <glibmm/i18n.h>
+
+#include "ui/dialog-events.h"
+#include "ui/widget/spinbutton.h"
+#include "ui/widget/frame.h"

 #include "extension/system.h"
 #include "extension/input.h"
@@ -54,11 +57,8 @@
 #include "inkscape.h"
 #include "util/units.h"

-#include "ui/dialog-events.h"
-#include <gtk/gtk.h>
-#include "ui/widget/spinbutton.h"
-#include "ui/widget/frame.h"
-#include <glibmm/i18n.h>
+#include "sp-root.h"
+

 #include <gdkmm/general.h>

@@ -87,19 +87,13 @@ PdfImportDialog::PdfImportDialog(PDFDoc *doc, const gchar */*uri*/)
     _poppler_doc = NULL;
 #endif // HAVE_POPPLER_CAIRO
     _pdf_doc = doc;
-    cancelbutton = Gtk::manage(new class Gtk::Button(Gtk::StockID("gtk-cancel")));
-    okbutton = Gtk::manage(new class Gtk::Button(Gtk::StockID("gtk-ok")));
+    cancelbutton = Gtk::manage(new Gtk::Button(_("_Cancel"), true));
+    okbutton     = Gtk::manage(new Gtk::Button(_("_OK"),     true));
     _labelSelect = Gtk::manage(new class Gtk::Label(_("Select page:")));

     // Page number
-#if WITH_GTKMM_3_0
-    Glib::RefPtr<Gtk::Adjustment> _pageNumberSpin_adj = Gtk::Adjustment::create(1, 1, _pdf_doc->getNumPages(), 1, 10, 0);
+    auto _pageNumberSpin_adj = Gtk::Adjustment::create(1, 1, _pdf_doc->getNumPages(), 1, 10, 0);
     _pageNumberSpin = Gtk::manage(new Inkscape::UI::Widget::SpinButton(_pageNumberSpin_adj, 1, 1));
-#else
-    Gtk::Adjustment *_pageNumberSpin_adj = Gtk::manage(
-            new class Gtk::Adjustment(1, 1, _pdf_doc->getNumPages(), 1, 10, 0));
-    _pageNumberSpin = Gtk::manage(new class Inkscape::UI::Widget::SpinButton(*_pageNumberSpin_adj, 1, 1));
-#endif
     _labelTotalPages = Gtk::manage(new class Gtk::Label());
     hbox2 = Gtk::manage(new class Gtk::HBox(false, 0));
     // Disable the page selector when there's only one page
@@ -137,13 +131,8 @@ PdfImportDialog::PdfImportDialog(PDFDoc *doc, const gchar */*uri*/)
     _labelViaInternal = Gtk::manage(new class Gtk::Label(_("Import via internal (Poppler derived) library. Text is stored as text but white space is missing. Meshes are converted to tiles, the number depends on the precision set below.")));
 #endif

-#if WITH_GTKMM_3_0
     _fallbackPrecisionSlider_adj = Gtk::Adjustment::create(2, 1, 256, 1, 10, 10);
     _fallbackPrecisionSlider = Gtk::manage(new class Gtk::Scale(_fallbackPrecisionSlider_adj));
-#else
-    _fallbackPrecisionSlider_adj = Gtk::manage(new class Gtk::Adjustment(2, 1, 256, 1, 10, 10));
-    _fallbackPrecisionSlider = Gtk::manage(new class Gtk::HScale(*_fallbackPrecisionSlider_adj));
-#endif
     _fallbackPrecisionSlider->set_value(2.0);
     _labelPrecisionComment = Gtk::manage(new class Gtk::Label(_("rough")));
     hbox6 = Gtk::manage(new class Gtk::HBox(false, 4));
@@ -170,9 +159,50 @@ PdfImportDialog::PdfImportDialog(PDFDoc *doc, const gchar */*uri*/)
     okbutton->set_can_focus();
     okbutton->set_can_default();
     okbutton->set_relief(Gtk::RELIEF_NORMAL);
-    this->get_action_area()->property_layout_style().set_value(Gtk::BUTTONBOX_END);
+
+#if GTK_CHECK_VERSION(3,16,0)
+    _labelSelect->set_xalign(0.5);
+    _labelSelect->set_yalign(0.5);
+    _labelTotalPages->set_xalign(0.5);
+    _labelTotalPages->set_yalign(0.5);
+    _labelPrecision->set_xalign(0.0);
+    _labelPrecision->set_yalign(0.5);
+    _labelPrecisionWarning->set_xalign(0.0);
+    _labelPrecisionWarning->set_yalign(0.5);
+    _labelPrecisionComment->set_xalign(0.5);
+    _labelPrecisionComment->set_yalign(0.5);
+#else
     _labelSelect->set_alignment(0.5,0.5);
-    _labelSelect->set_padding(4,0);
+    _labelTotalPages->set_alignment(0.5,0.5);
+    _labelPrecision->set_alignment(0,0.5);
+    _labelPrecisionWarning->set_alignment(0,0.5);
+    _labelPrecisionComment->set_alignment(0.5,0.5);
+#endif
+
+#if GTK_CHECK_VERSION(3,12,0)
+    _labelSelect->set_margin_start(4);
+    _labelSelect->set_margin_end(4);
+    _labelTotalPages->set_margin_start(4);
+    _labelTotalPages->set_margin_end(4);
+    _labelPrecision->set_margin_start(4);
+    _labelPrecision->set_margin_end(4);
+    _labelPrecisionWarning->set_margin_start(4);
+    _labelPrecisionWarning->set_margin_end(4);
+    _labelPrecisionComment->set_margin_start(4);
+    _labelPrecisionComment->set_margin_end(4);
+#else
+    _labelSelect->set_margin_left(4);
+    _labelSelect->set_margin_right(4);
+    _labelTotalPages->set_margin_left(4);
+    _labelTotalPages->set_margin_right(4);
+    _labelPrecision->set_margin_left(4);
+    _labelPrecision->set_margin_right(4);
+    _labelPrecisionWarning->set_margin_left(4);
+    _labelPrecisionWarning->set_margin_right(4);
+    _labelPrecisionComment->set_margin_left(4);
+    _labelPrecisionComment->set_margin_right(4);
+#endif
+
     _labelSelect->set_justify(Gtk::JUSTIFY_LEFT);
     _labelSelect->set_line_wrap(false);
     _labelSelect->set_use_markup(false);
@@ -182,8 +212,6 @@ PdfImportDialog::PdfImportDialog(PDFDoc *doc, const gchar */*uri*/)
     _pageNumberSpin->set_numeric(true);
     _pageNumberSpin->set_digits(0);
     _pageNumberSpin->set_wrap(false);
-    _labelTotalPages->set_alignment(0.5,0.5);
-    _labelTotalPages->set_padding(4,0);
     _labelTotalPages->set_justify(Gtk::JUSTIFY_LEFT);
     _labelTotalPages->set_line_wrap(false);
     _labelTotalPages->set_use_markup(false);
@@ -202,14 +230,10 @@ PdfImportDialog::PdfImportDialog(PDFDoc *doc, const gchar */*uri*/)
     vbox2->pack_start(*hbox3);
     _pageSettingsFrame->add(*vbox2);
     _pageSettingsFrame->set_border_width(4);
-    _labelPrecision->set_alignment(0,0.5);
-    _labelPrecision->set_padding(4,0);
     _labelPrecision->set_justify(Gtk::JUSTIFY_LEFT);
     _labelPrecision->set_line_wrap(true);
     _labelPrecision->set_use_markup(false);
     _labelPrecision->set_selectable(false);
-    _labelPrecisionWarning->set_alignment(0,0.5);
-    _labelPrecisionWarning->set_padding(4,0);
     _labelPrecisionWarning->set_justify(Gtk::JUSTIFY_LEFT);
     _labelPrecisionWarning->set_line_wrap(true);
     _labelPrecisionWarning->set_use_markup(true);
@@ -226,6 +250,14 @@ PdfImportDialog::PdfImportDialog(PDFDoc *doc, const gchar */*uri*/)
     _importViaInternal->set_active(true);
     _labelViaPoppler->set_line_wrap(true);
     _labelViaInternal->set_line_wrap(true);
+
+# if GTK_CHECK_VERSION(3,16,0)
+    _labelViaPoppler->set_xalign(0);
+    _labelViaInternal->set_xalign(0);
+# else
+    _labelViaPoppler->set_alignment(0, 0.5);
+    _labelViaInternal->set_alignment(0, 0.5);
+# endif
 #endif

     _fallbackPrecisionSlider->set_size_request(180,-1);
@@ -235,8 +267,6 @@ PdfImportDialog::PdfImportDialog(PDFDoc *doc, const gchar */*uri*/)
     _fallbackPrecisionSlider->set_draw_value(true);
     _fallbackPrecisionSlider->set_value_pos(Gtk::POS_TOP);
     _labelPrecisionComment->set_size_request(90,-1);
-    _labelPrecisionComment->set_alignment(0.5,0.5);
-    _labelPrecisionComment->set_padding(4,0);
     _labelPrecisionComment->set_justify(Gtk::JUSTIFY_LEFT);
     _labelPrecisionComment->set_line_wrap(false);
     _labelPrecisionComment->set_use_markup(false);
@@ -273,20 +303,14 @@ PdfImportDialog::PdfImportDialog(PDFDoc *doc, const gchar */*uri*/)
     // vbox3->pack_start(*hbox5, Gtk::PACK_SHRINK, 4);
     _importSettingsFrame->add(*vbox3);
     _importSettingsFrame->set_border_width(4);
-    vbox1->pack_start(*_pageSettingsFrame, Gtk::PACK_EXPAND_PADDING, 0);
-    vbox1->pack_start(*_importSettingsFrame, Gtk::PACK_EXPAND_PADDING, 0);
+    vbox1->pack_start(*_pageSettingsFrame, Gtk::PACK_SHRINK, 0);
+    vbox1->pack_start(*_importSettingsFrame, Gtk::PACK_SHRINK, 0);
     hbox1->pack_start(*vbox1);
-    hbox1->pack_start(*_previewArea, Gtk::PACK_EXPAND_WIDGET, 4);
+    hbox1->pack_start(*_previewArea, Gtk::PACK_SHRINK, 4);

-#if WITH_GTKMM_3_0
     get_content_area()->set_homogeneous(false);
     get_content_area()->set_spacing(0);
     get_content_area()->pack_start(*hbox1);
-#else
-    this->get_vbox()->set_homogeneous(false);
-    this->get_vbox()->set_spacing(0);
-    this->get_vbox()->pack_start(*hbox1);
-#endif

     this->set_title(_("PDF Import Settings"));
     this->set_modal(true);
@@ -300,12 +324,7 @@ PdfImportDialog::PdfImportDialog(PDFDoc *doc, const gchar */*uri*/)
     this->show_all();

     // Connect signals
-#if WITH_GTKMM_3_0
     _previewArea->signal_draw().connect(sigc::mem_fun(*this, &PdfImportDialog::_onDraw));
-#else
-    _previewArea->signal_expose_event().connect(sigc::mem_fun(*this, &PdfImportDialog::_onExposePreview));
-#endif
-
     _pageNumberSpin_adj->signal_value_changed().connect(sigc::mem_fun(*this, &PdfImportDialog::_onPageNumberChanged));
     _cropCheck->signal_toggled().connect(sigc::mem_fun(*this, &PdfImportDialog::_onToggleCropping));
     _fallbackPrecisionSlider_adj->signal_value_changed().connect(sigc::mem_fun(*this, &PdfImportDialog::_onPrecisionChanged));
@@ -338,7 +357,7 @@ PdfImportDialog::PdfImportDialog(PDFDoc *doc, const gchar */*uri*/)
     _preview_height = 300;

     // Init preview
-    _thumb_data = NULL;
+    _thumb_data = nullptr;
     _pageNumberSpin_adj->set_value(1.0);
     _current_page = 1;
     _setPreviewPage(_current_page);
@@ -527,16 +546,6 @@ static void copy_cairo_surface_to_pixbuf (cairo_surface_t *surface,

 #endif

-/**
- * \brief Updates the preview area with the previously rendered thumbnail
- */
-#if !WITH_GTKMM_3_0
-bool PdfImportDialog::_onExposePreview(GdkEventExpose * /*event*/) {
-    Cairo::RefPtr<Cairo::Context> cr = _previewArea->get_window()->create_cairo_context();
-    return _onDraw(cr);
-}
-#endif
-
 bool PdfImportDialog::_onDraw(const Cairo::RefPtr<Cairo::Context>& cr) {
     // Check if we have a thumbnail at all
     if (!_thumb_data) {
@@ -585,7 +594,7 @@ void PdfImportDialog::_setPreviewPage(int page) {
     if (!_render_thumb) {
         if (_thumb_data) {
             gfree(_thumb_data);
-            _thumb_data = NULL;
+            _thumb_data = nullptr;
         }
         if (!_previewed_page->loadThumb(&_thumb_data,
              &_thumb_width, &_thumb_height, &_thumb_rowstride)) {
@@ -705,7 +714,7 @@ PdfInput::open(::Inkscape::Extension::Input * /*mod*/, const gchar * uri) {
     // poppler does not use glib g_open. So on win32 we must use unicode call. code was copied from
     // glib gstdio.c
     GooString *filename_goo = new GooString(uri);
-    PDFDoc *pdf_doc = new PDFDoc(filename_goo, NULL, NULL, NULL);   // TODO: Could ask for password
+    PDFDoc *pdf_doc = new PDFDoc(filename_goo, nullptr, nullptr, nullptr);   // TODO: Could ask for password
     //delete filename_goo;
 #else
     wchar_t *wfilename = reinterpret_cast<wchar_t*>(g_utf8_to_utf16 (uri, -1, NULL, NULL, NULL));
@@ -745,17 +754,17 @@ PdfInput::open(::Inkscape::Extension::Input * /*mod*/, const gchar * uri) {
             g_message("Failed to load document from data (error %d)", error);
         }

-        return NULL;
+        return nullptr;
     }

-    PdfImportDialog *dlg = NULL;
+    PdfImportDialog *dlg = nullptr;
     if (INKSCAPE.use_gui()) {
         dlg = new PdfImportDialog(pdf_doc, uri);
         if (!dlg->showDialog()) {
             _cancelled = true;
             delete dlg;
             delete pdf_doc;
-            return NULL;
+            return nullptr;
         }
     }

@@ -768,14 +777,16 @@ PdfInput::open(::Inkscape::Extension::Input * /*mod*/, const gchar * uri) {
         is_importvia_poppler = dlg->getImportMethod();
         // printf("PDF import via %s.\n", is_importvia_poppler ? "poppler" : "native");
 #endif
+    } else {
+        page_num = INKSCAPE.get_pdf_page();
     }

-    SPDocument *doc = NULL;
+    SPDocument *doc = nullptr;
     bool saved = false;
     if(!is_importvia_poppler)
     {
         // native importer
-        doc = SPDocument::createNewDoc(NULL, TRUE, TRUE);
+        doc = SPDocument::createNewDoc(nullptr, TRUE, TRUE);
         saved = DocumentUndo::getUndoSensitive(doc);
         DocumentUndo::setUndoSensitive(doc, false); // No need to undo in this temporary document

@@ -793,7 +804,7 @@ PdfInput::open(::Inkscape::Extension::Input * /*mod*/, const gchar * uri) {
             dlg->getImportSettings(prefs);

         // Apply crop settings
-        PDFRectangle *clipToBox = NULL;
+        _POPPLER_CONST PDFRectangle *clipToBox = nullptr;
         double crop_setting;
         sp_repr_get_double(prefs, "cropTo", &crop_setting);

@@ -936,7 +947,7 @@ PdfInput::open(::Inkscape::Extension::Input * /*mod*/, const gchar * uri) {

 #include "../clear-n_.h"

-void PdfInput::init(void) {
+void PdfInput::init() {
     /* PDF in */
     Inkscape::Extension::build_from_mem(
         "<inkscape-extension xmlns=\"" INKSCAPE_EXTENSION_URI "\">\n"
@@ -945,8 +956,8 @@ void PdfInput::init(void) {
             "<input>\n"
                 "<extension>.pdf</extension>\n"
                 "<mimetype>application/pdf</mimetype>\n"
-                "<filetypename>" N_("Adobe PDF (*.pdf)") "</filetypename>\n"
-                "<filetypetooltip>" N_("Adobe Portable Document Format") "</filetypetooltip>\n"
+                "<filetypename>" N_("Portable Document Format (*.pdf)") "</filetypename>\n"
+                "<filetypetooltip>" N_("Portable Document Format") "</filetypetooltip>\n"
             "</input>\n"
         "</inkscape-extension>", new PdfInput());




diff --git a/src/extension/internal/pdfinput/pdf-input.h b/src/extension/internal/pdfinput/pdf-input.h
index 6e36603..88a894f 100644
--- a/src/extension/internal/pdfinput/pdf-input.h
+++ b/src/extension/internal/pdfinput/pdf-input.h
@@ -15,6 +15,7 @@
 #endif

 #ifdef HAVE_POPPLER
+#include "poppler-transition-api.h"

 #include <gtkmm/dialog.h>

@@ -32,18 +33,13 @@ class Page;
 class PDFDoc;

 namespace Gtk {
-  class Alignment;
   class Button;
   class CheckButton;
   class ComboBoxText;
   class DrawingArea;
   class Frame;
   class HBox;
-#if WITH_GTKMM_3_0
   class Scale;
-#else
-  class HScale;
-#endif
   class RadioButton;
   class VBox;
   class Label;
@@ -68,7 +64,7 @@ class PdfImportDialog : public Gtk::Dialog
 {
 public:
     PdfImportDialog(PDFDoc *doc, const gchar *uri);
-    virtual ~PdfImportDialog();
+    ~PdfImportDialog() override;

     bool showDialog();
     int getSelectedPage();
@@ -79,10 +75,6 @@ class PdfImportDialog : public Gtk::Dialog
     void _setPreviewPage(int page);

     // Signal handlers
-#if !WITH_GTKMM_3_0
-    bool _onExposePreview(GdkEventExpose *event);
-#endif
-
     bool _onDraw(const Cairo::RefPtr<Cairo::Context>& cr);
     void _onPageNumberChanged();
     void _onToggleCropping();
@@ -110,13 +102,8 @@ class PdfImportDialog : public Gtk::Dialog
     class Gtk::RadioButton * _importViaInternal; // Use native (poppler based) importing
     class Gtk::Label * _labelViaInternal;
 #endif
-#if WITH_GTKMM_3_0
-    class Gtk::Scale * _fallbackPrecisionSlider;
+    Gtk::Scale * _fallbackPrecisionSlider;
     Glib::RefPtr<Gtk::Adjustment> _fallbackPrecisionSlider_adj;
-#else
-    class Gtk::HScale * _fallbackPrecisionSlider;
-    class Gtk::Adjustment *_fallbackPrecisionSlider_adj;
-#endif
     class Gtk::Label * _labelPrecisionComment;
     class Gtk::HBox * hbox6;
     class Gtk::Label * _labelText;
@@ -146,12 +133,12 @@ class PdfImportDialog : public Gtk::Dialog


 class PdfInput: public Inkscape::Extension::Implementation::Implementation {
-    PdfInput () { };
+    PdfInput () = default;;
 public:
     SPDocument *open( Inkscape::Extension::Input *mod,
-                                const gchar *uri );
-    static void         init( void );
-    virtual bool wasCancelled();
+                                const gchar *uri ) override;
+    static void         init( );
+    bool wasCancelled() override;
 private:
     bool _cancelled;
 };





diff --git a/src/extension/internal/pdfinput/pdf-parser.cpp b/src/extension/internal/pdfinput/pdf-parser.cpp
index 604b7f8..75f665a 100644
--- a/src/extension/internal/pdfinput/pdf-parser.cpp
+++ b/src/extension/internal/pdfinput/pdf-parser.cpp
@@ -14,31 +14,22 @@
 #ifdef HAVE_CONFIG_H
 # include <config.h>
 #endif
-
 #ifdef HAVE_POPPLER
-
 #ifdef USE_GCC_PRAGMAS
 #pragma implementation
 #endif
-
-extern "C" {
-        
-#include <stdlib.h>
-#include <stdio.h>
-#include <stddef.h>
-#include <string.h>
-#include <math.h>
-
-}
-
+#include <cstdlib.h>
+#include <cstdio.h>
+#include <cstddef.h>
+#include <cstring.h>
+#include <cmath.h>
 #include "svg-builder.h"
 #include "Gfx.h"
 #include "pdf-parser.h"
 #include "util/units.h"
-
+#include "glib/poppler-features.h"
 #include "goo/gmem.h"
-#include "goo/GooTimer.h"
-#include "goo/GooHash.h"
+#include "goo/GooString.h"
 #include "GlobalParams.h"
 #include "CharTypes.h"
 #include "Object.h"
@@ -265,13 +256,13 @@ GfxPatch blankPatch()
 class ClipHistoryEntry {
 public:
 
-    ClipHistoryEntry(GfxPath *clipPath = NULL, GfxClipType clipType = clipNormal);
+    ClipHistoryEntry(GfxPath *clipPath = nullptr, GfxClipType clipType = clipNormal);
     virtual ~ClipHistoryEntry();
 
     // Manipulate clip path stack
     ClipHistoryEntry *save();
     ClipHistoryEntry *restore();
-    GBool hasSaves() { return saved != NULL; }
+    GBool hasSaves() { return saved != nullptr; }
     void setClip(GfxPath *newClipPath, GfxClipType newClipType = clipNormal);
     GfxPath *getClipPath() { return clipPath; }
     GfxClipType getClipType() { return clipType; }
@@ -295,30 +286,30 @@ PdfParser::PdfParser(XRef *xrefA,
                      int /*pageNum*/,
 		     int rotate,
 		     Dict *resDict,
-                     PDFRectangle *box,
-		     PDFRectangle *cropBox) :
+                     _POPPLER_CONST PDFRectangle *box,
+                     _POPPLER_CONST PDFRectangle *cropBox) :
     xref(xrefA),
     builder(builderA),
     subPage(gFalse),
     printCommands(false),
-    res(new GfxResources(xref, resDict, NULL)), // start the resource stack
+    res(new GfxResources(xref, resDict, nullptr)), // start the resource stack
     state(new GfxState(72.0, 72.0, box, rotate, gTrue)),
     fontChanged(gFalse),
     clip(clipNone),
     ignoreUndef(0),
     baseMatrix(),
     formDepth(0),
-    parser(NULL),
+    parser(nullptr),
     colorDeltas(),
     maxDepths(),
     clipHistory(new ClipHistoryEntry()),
-    operatorHistory(NULL)
+    operatorHistory(nullptr)
 {
   setDefaultApproximationPrecision();
   builder->setDocumentSize(Inkscape::Util::Quantity::convert(state->getPageWidth(), "pt", "px"),
                            Inkscape::Util::Quantity::convert(state->getPageHeight(), "pt", "px"));
 
-  double *ctm = state->getCTM();
+  const double *ctm = state->getCTM();
   double scaledCTM[6];
   for (int i = 0; i < 6; ++i) {
     baseMatrix[i] = ctm[i];
@@ -353,23 +344,23 @@ PdfParser::PdfParser(XRef *xrefA,
 PdfParser::PdfParser(XRef *xrefA,
 		     Inkscape::Extension::Internal::SvgBuilder *builderA,
                      Dict *resDict,
-		     PDFRectangle *box) :
+		     _POPPLER_CONST PDFRectangle *box) :
     xref(xrefA),
     builder(builderA),
     subPage(gTrue),
     printCommands(false),
-    res(new GfxResources(xref, resDict, NULL)), // start the resource stack
+    res(new GfxResources(xref, resDict, nullptr)), // start the resource stack
     state(new GfxState(72, 72, box, 0, gFalse)),
     fontChanged(gFalse),
     clip(clipNone),
     ignoreUndef(0),
     baseMatrix(),
     formDepth(0),
-    parser(NULL),
+    parser(nullptr),
     colorDeltas(),
     maxDepths(),
     clipHistory(new ClipHistoryEntry()),
-    operatorHistory(NULL)
+    operatorHistory(nullptr)
 {
   setDefaultApproximationPrecision();
   
@@ -400,12 +391,12 @@ PdfParser::~PdfParser() {
 
   if (state) {
     delete state;
-    state = NULL;
+    state = nullptr;
   }
 
   if (clipHistory) {
     delete clipHistory;
-    clipHistory = NULL;
+    clipHistory = nullptr;
   }
 }
 
@@ -437,7 +428,7 @@ void PdfParser::parse(Object *obj, GBool topLevel) {
   parser = new Parser(xref, new Lexer(xref, obj), gFalse);
   go(topLevel);
   delete parser;
-  parser = NULL;
+  parser = nullptr;
 }
 
 void PdfParser::go(GBool /*topLevel*/)
@@ -532,38 +523,38 @@ void PdfParser::pushOperator(const char *name)
 {
     OpHistoryEntry *newEntry = new OpHistoryEntry;
     newEntry->name = name;
-    newEntry->state = NULL;
-    newEntry->depth = (operatorHistory != NULL ? (operatorHistory->depth+1) : 0);
+    newEntry->state = nullptr;
+    newEntry->depth = (operatorHistory != nullptr ? (operatorHistory->depth+1) : 0);
     newEntry->next = operatorHistory;
     operatorHistory = newEntry;
 
     // Truncate list if needed
     if (operatorHistory->depth > maxOperatorHistoryDepth) {
         OpHistoryEntry *curr = operatorHistory;
-        OpHistoryEntry *prev = NULL;
-        while (curr && curr->next != NULL) {
+        OpHistoryEntry *prev = nullptr;
+        while (curr && curr->next != nullptr) {
             curr->depth--;
             prev = curr;
             curr = curr->next;
         }
         if (prev) {
-            if (curr->state != NULL)
+            if (curr->state != nullptr)
                 delete curr->state;
             delete curr;
-            prev->next = NULL;
+            prev->next = nullptr;
         }
     }
 }
 
 const char *PdfParser::getPreviousOperator(unsigned int look_back) {
-    OpHistoryEntry *prev = NULL;
-    if (operatorHistory != NULL && look_back > 0) {
+    OpHistoryEntry *prev = nullptr;
+    if (operatorHistory != nullptr && look_back > 0) {
         prev = operatorHistory->next;
-        while (--look_back > 0 && prev != NULL) {
+        while (--look_back > 0 && prev != nullptr) {
             prev = prev->next;
         }
     }
-    if (prev != NULL) {
+    if (prev != nullptr) {
         return prev->name;
     } else {
         return "";
@@ -572,7 +563,7 @@ const char *PdfParser::getPreviousOperator(unsigned int look_back) {
 
 void PdfParser::execOp(Object *cmd, Object args[], int numArgs) {
   PdfOperator *op;
-  char *name;
+  const char *name;
   Object *argPtr;
   int i;
 
@@ -620,7 +611,7 @@ void PdfParser::execOp(Object *cmd, Object args[], int numArgs) {
   (this->*op->func)(argPtr, numArgs);
 }
 
-PdfOperator* PdfParser::findOp(char *name) {
+PdfOperator* PdfParser::findOp(const char *name) {
   int a = -1;
   int b = numOps;
   int cmp = -1;
@@ -636,7 +627,7 @@ PdfOperator* PdfParser::findOp(char *name) {
       a = b = m;
   }
   if (cmp != 0)
-    return NULL;
+    return nullptr;
   return &opTab[a];
 }
 
@@ -713,7 +704,7 @@ void PdfParser::opConcat(Object args[], int /*numArgs*/)
 // TODO not good that numArgs is ignored but args[] is used:
 void PdfParser::opSetDash(Object args[], int /*numArgs*/)
 {
-  double *dash = 0;
+  double *dash = nullptr;
 
   Array *a = args[0].getArray();
   int length = a->getLength();
@@ -771,7 +762,7 @@ void PdfParser::opSetLineWidth(Object args[], int /*numArgs*/)
 void PdfParser::opSetExtGState(Object args[], int /*numArgs*/)
 {
   Object obj1, obj2, obj3, obj4, obj5;
-  Function *funcs[4] = {0, 0, 0, 0};
+  Function *funcs[4] = {nullptr, nullptr, nullptr, nullptr};
   GfxColor backdropColor;
   GBool haveBackdropColor = gFalse;
   GBool alpha = gFalse;
@@ -877,7 +868,7 @@ void PdfParser::opSetExtGState(Object args[], int /*numArgs*/)
   }
   if (obj2.isName(const_cast<char*>("Default")) ||
       obj2.isName(const_cast<char*>("Identity"))) {
-    funcs[0] = funcs[1] = funcs[2] = funcs[3] = NULL;
+    funcs[0] = funcs[1] = funcs[2] = funcs[3] = nullptr;
     state->setTransfer(funcs);
   } else if (obj2.isArray() && obj2.arrayGetLength() == 4) {
     int pos = 4;
@@ -901,7 +892,7 @@ void PdfParser::opSetExtGState(Object args[], int /*numArgs*/)
     }
   } else if (obj2.isName() || obj2.isDict() || obj2.isStream()) {
     if ((funcs[0] = Function::parse(&obj2))) {
-      funcs[1] = funcs[2] = funcs[3] = NULL;
+      funcs[1] = funcs[2] = funcs[3] = nullptr;
       state->setTransfer(funcs);
     }
   } else if (!obj2.isNull()) {
@@ -932,7 +923,7 @@ void PdfParser::opSetExtGState(Object args[], int /*numArgs*/)
 #if !defined(POPPLER_NEW_OBJECT_API)
       obj3.free();
 #endif
-      funcs[0] = NULL;
+      funcs[0] = nullptr;
 #if defined(POPPLER_NEW_OBJECT_API)
       if (!((obj3 = obj2.dictLookup(const_cast<char*>("TR"))).isNull())) {
 #else
@@ -943,7 +934,7 @@ void PdfParser::opSetExtGState(Object args[], int /*numArgs*/)
 	    funcs[0]->getOutputSize() != 1) {
 	  error(errSyntaxError, getPos(), "Invalid transfer function in soft mask in ExtGState");
 	  delete funcs[0];
-	  funcs[0] = NULL;
+	  funcs[0] = nullptr;
 	}
       }
 #if defined(POPPLER_NEW_OBJECT_API)
@@ -977,7 +968,7 @@ void PdfParser::opSetExtGState(Object args[], int /*numArgs*/)
       if (obj2.dictLookup(const_cast<char*>("G"), &obj3)->isStream()) {
 	if (obj3.streamGetDict()->lookup(const_cast<char*>("Group"), &obj4)->isDict()) {
 #endif
-	  GfxColorSpace *blendingColorSpace = 0;
+	  GfxColorSpace *blendingColorSpace = nullptr;
 	  GBool isolated = gFalse;
 	  GBool knockout = gFalse;
 #if defined(POPPLER_NEW_OBJECT_API)
@@ -986,7 +977,7 @@ void PdfParser::opSetExtGState(Object args[], int /*numArgs*/)
 	  if (!obj4.dictLookup(const_cast<char*>("CS"), &obj5)->isNull()) {
 #endif
 #if defined(POPPLER_EVEN_NEWER_NEW_COLOR_SPACE_API)
-	    blendingColorSpace = GfxColorSpace::parse(NULL, &obj5, NULL, NULL);
+	    blendingColorSpace = GfxColorSpace::parse(nullptr, &obj5, nullptr, nullptr);
 #elif defined(POPPLER_EVEN_NEWER_COLOR_SPACE_API)
 	    blendingColorSpace = GfxColorSpace::parse(&obj5, NULL, NULL);
 #else
@@ -1141,7 +1132,7 @@ void PdfParser::doSoftMask(Object *str, GBool alpha,
 #else
   dict->lookup(const_cast<char*>("Resources"), &obj1);
 #endif
-  resDict = obj1.isDict() ? obj1.getDict() : (Dict *)NULL;
+  resDict = obj1.isDict() ? obj1.getDict() : (Dict *)nullptr;
 
   // draw it
   ++formDepth;
@@ -1171,7 +1162,7 @@ void PdfParser::opSetFillGray(Object args[], int /*numArgs*/)
 {
   GfxColor color;
 
-  state->setFillPattern(NULL);
+  state->setFillPattern(nullptr);
   state->setFillColorSpace(new GfxDeviceGrayColorSpace());
   color.c[0] = dblToCol(args[0].getNum());
   state->setFillColor(&color);
@@ -1183,7 +1174,7 @@ void PdfParser::opSetStrokeGray(Object args[], int /*numArgs*/)
 {
   GfxColor color;
 
-  state->setStrokePattern(NULL);
+  state->setStrokePattern(nullptr);
   state->setStrokeColorSpace(new GfxDeviceGrayColorSpace());
   color.c[0] = dblToCol(args[0].getNum());
   state->setStrokeColor(&color);
@@ -1196,7 +1187,7 @@ void PdfParser::opSetFillCMYKColor(Object args[], int /*numArgs*/)
   GfxColor color;
   int i;
 
-  state->setFillPattern(NULL);
+  state->setFillPattern(nullptr);
   state->setFillColorSpace(new GfxDeviceCMYKColorSpace());
   for (i = 0; i < 4; ++i) {
     color.c[i] = dblToCol(args[i].getNum());
@@ -1210,7 +1201,7 @@ void PdfParser::opSetStrokeCMYKColor(Object args[], int /*numArgs*/)
 {
   GfxColor color;
 
-  state->setStrokePattern(NULL);
+  state->setStrokePattern(nullptr);
   state->setStrokeColorSpace(new GfxDeviceCMYKColorSpace());
   for (int i = 0; i < 4; ++i) {
     color.c[i] = dblToCol(args[i].getNum());
@@ -1224,7 +1215,7 @@ void PdfParser::opSetFillRGBColor(Object args[], int /*numArgs*/)
 {
   GfxColor color;
 
-  state->setFillPattern(NULL);
+  state->setFillPattern(nullptr);
   state->setFillColorSpace(new GfxDeviceRGBColorSpace());
   for (int i = 0; i < 3; ++i) {
     color.c[i] = dblToCol(args[i].getNum());
@@ -1237,7 +1228,7 @@ void PdfParser::opSetFillRGBColor(Object args[], int /*numArgs*/)
 void PdfParser::opSetStrokeRGBColor(Object args[], int /*numArgs*/) {
   GfxColor color;
 
-  state->setStrokePattern(NULL);
+  state->setStrokePattern(nullptr);
   state->setStrokeColorSpace(new GfxDeviceRGBColorSpace());
   for (int i = 0; i < 3; ++i) {
     color.c[i] = dblToCol(args[i].getNum());
@@ -1251,19 +1242,19 @@ void PdfParser::opSetFillColorSpace(Object args[], int /*numArgs*/)
 {
   Object obj;
 
-  state->setFillPattern(NULL);
+  state->setFillPattern(nullptr);
 #if defined(POPPLER_NEW_OBJECT_API)
   obj = res->lookupColorSpace(args[0].getName());
 #else
   res->lookupColorSpace(args[0].getName(), &obj);
 #endif
 
-  GfxColorSpace *colorSpace = 0;
+  GfxColorSpace *colorSpace = nullptr;
 #if defined(POPPLER_EVEN_NEWER_NEW_COLOR_SPACE_API)
   if (obj.isNull()) {
-    colorSpace = GfxColorSpace::parse(NULL, &args[0], NULL, NULL);
+    colorSpace = GfxColorSpace::parse(nullptr, &args[0], nullptr, nullptr);
   } else {
-    colorSpace = GfxColorSpace::parse(NULL, &obj, NULL, NULL);
+    colorSpace = GfxColorSpace::parse(nullptr, &obj, nullptr, nullptr);
   }
 #elif defined(POPPLER_EVEN_NEWER_COLOR_SPACE_API)
   if (obj.isNull()) {
@@ -1296,9 +1287,9 @@ void PdfParser::opSetFillColorSpace(Object args[], int /*numArgs*/)
 void PdfParser::opSetStrokeColorSpace(Object args[], int /*numArgs*/)
 {
   Object obj;
-  GfxColorSpace *colorSpace = 0;
+  GfxColorSpace *colorSpace = nullptr;
 
-  state->setStrokePattern(NULL);
+  state->setStrokePattern(nullptr);
 #if defined(POPPLER_NEW_OBJECT_API)
   obj = res->lookupColorSpace(args[0].getName());
 #else
@@ -1306,9 +1297,9 @@ void PdfParser::opSetStrokeColorSpace(Object args[], int /*numArgs*/)
 #endif
 #if defined(POPPLER_EVEN_NEWER_NEW_COLOR_SPACE_API)
   if (obj.isNull()) {
-    colorSpace = GfxColorSpace::parse(NULL, &args[0], NULL, NULL);
+    colorSpace = GfxColorSpace::parse(nullptr, &args[0], nullptr, nullptr);
   } else {
-    colorSpace = GfxColorSpace::parse(NULL, &obj, NULL, NULL);
+    colorSpace = GfxColorSpace::parse(nullptr, &obj, nullptr, nullptr);
   }
 #elif defined(POPPLER_EVEN_NEWER_COLOR_SPACE_API)
   if (obj.isNull()) {
@@ -1345,7 +1336,7 @@ void PdfParser::opSetFillColor(Object args[], int numArgs) {
     error(errSyntaxError, getPos(), "Incorrect number of arguments in 'sc' command");
     return;
   }
-  state->setFillPattern(NULL);
+  state->setFillPattern(nullptr);
   for (i = 0; i < numArgs; ++i) {
     color.c[i] = dblToCol(args[i].getNum());
   }
@@ -1361,7 +1352,7 @@ void PdfParser::opSetStrokeColor(Object args[], int numArgs) {
     error(errSyntaxError, getPos(), "Incorrect number of arguments in 'SC' command");
     return;
   }
-  state->setStrokePattern(NULL);
+  state->setStrokePattern(nullptr);
   for (i = 0; i < numArgs; ++i) {
     color.c[i] = dblToCol(args[i].getNum());
   }
@@ -1392,7 +1383,7 @@ void PdfParser::opSetFillColorN(Object args[], int numArgs) {
     GfxPattern *pattern;
 #if defined(POPPLER_EVEN_NEWER_COLOR_SPACE_API)
     if (args[numArgs-1].isName() &&
-	(pattern = res->lookupPattern(args[numArgs-1].getName(), NULL, NULL))) {
+	(pattern = res->lookupPattern(args[numArgs-1].getName(), nullptr, nullptr))) {
       state->setFillPattern(pattern);
       builder->updateStyle(state);
     }
@@ -1409,7 +1400,7 @@ void PdfParser::opSetFillColorN(Object args[], int numArgs) {
       error(errSyntaxError, getPos(), "Incorrect number of arguments in 'scn' command");
       return;
     }
-    state->setFillPattern(NULL);
+    state->setFillPattern(nullptr);
     for (i = 0; i < numArgs && i < gfxColorMaxComps; ++i) {
       if (args[i].isNum()) {
 	color.c[i] = dblToCol(args[i].getNum());
@@ -1444,7 +1435,7 @@ void PdfParser::opSetStrokeColorN(Object args[], int numArgs) {
     GfxPattern *pattern;
 #if defined(POPPLER_EVEN_NEWER_COLOR_SPACE_API)
     if (args[numArgs-1].isName() &&
-	(pattern = res->lookupPattern(args[numArgs-1].getName(), NULL, NULL))) {
+	(pattern = res->lookupPattern(args[numArgs-1].getName(), nullptr, nullptr))) {
       state->setStrokePattern(pattern);
       builder->updateStyle(state);
     }
@@ -1461,7 +1452,7 @@ void PdfParser::opSetStrokeColorN(Object args[], int numArgs) {
       error(errSyntaxError, getPos(), "Incorrect number of arguments in 'SCN' command");
       return;
     }
-    state->setStrokePattern(NULL);
+    state->setStrokePattern(nullptr);
     for (i = 0; i < numArgs && i < gfxColorMaxComps; ++i) {
       if (args[i].isNum()) {
 	color.c[i] = dblToCol(args[i].getNum());
@@ -1752,7 +1743,7 @@ void PdfParser::doShadingPatternFillFallback(GfxShadingPattern *sPat,
                                              GBool stroke, GBool eoFill) {
   GfxShading *shading;
   GfxPath *savedPath;
-  double *ctm, *btm, *ptm;
+  const double *ctm, *btm, *ptm;
   double m[6], ictm[6], m1[6];
   double xMin, yMin, xMax, yMax;
   double det;
@@ -1764,7 +1755,7 @@ void PdfParser::doShadingPatternFillFallback(GfxShadingPattern *sPat,
   saveState();
 
   // clip to bbox
-  if (0 ){//shading->getHasBBox()) {
+  if (false ){//shading->getHasBBox()) {
     shading->getBBox(&xMin, &yMin, &xMax, &yMax);
     state->moveTo(xMin, yMin);
     state->lineTo(xMax, yMin);
@@ -1857,16 +1848,16 @@ void PdfParser::doShadingPatternFillFallback(GfxShadingPattern *sPat,
 // TODO not good that numArgs is ignored but args[] is used:
 void PdfParser::opShFill(Object args[], int /*numArgs*/)
 {
-  GfxShading *shading = 0;
-  GfxPath *savedPath = NULL;
+  GfxShading *shading = nullptr;
+  GfxPath *savedPath = nullptr;
   double xMin, yMin, xMax, yMax;
   double xTemp, yTemp;
   double gradientTransform[6];
-  double *matrix = NULL;
+  double *matrix = nullptr;
   GBool savedState = gFalse;
 
 #if defined(POPPLER_EVEN_NEWER_COLOR_SPACE_API)
-  if (!(shading = res->lookupShading(args[0].getName(), NULL, NULL))) {
+  if (!(shading = res->lookupShading(args[0].getName(), nullptr, nullptr))) {
     return;
   }
 #else
@@ -1884,7 +1875,7 @@ void PdfParser::opShFill(Object args[], int /*numArgs*/)
       // check proper operator sequence
       // first there should be one W(*) and then one 'cm' somewhere before 'sh'
       GBool seenClip, seenConcat;
-      seenClip = (clipHistory->getClipPath() != NULL);
+      seenClip = (clipHistory->getClipPath() != nullptr);
       seenConcat = gFalse;
       int i = 1;
       while (i <= maxOperatorHistoryDepth) {
@@ -1910,7 +1901,7 @@ void PdfParser::opShFill(Object args[], int /*numArgs*/)
   // clip to bbox
   if (shading->getHasBBox()) {
     shading->getBBox(&xMin, &yMin, &xMax, &yMax);
-    if (matrix != NULL) {
+    if (matrix != nullptr) {
         xTemp = matrix[0]*xMin + matrix[2]*yMin + matrix[4];
         yTemp = matrix[1]*xMin + matrix[3]*yMin + matrix[5];
         state->moveTo(xTemp, yTemp);
@@ -1994,7 +1985,7 @@ void PdfParser::doFunctionShFill1(GfxFunctionShading *shading,
   GfxColor color0M, color1M, colorM0, colorM1, colorMM;
   GfxColor colors2[4];
   double functionColorDelta = colorDeltas[pdfFunctionShading-1];
-  double *matrix;
+  const double *matrix;
   double xM, yM;
   int nComps, i, j;
 
@@ -2174,7 +2165,7 @@ void PdfParser::doPatchMeshShFill(GfxPatchMeshShading *shading) {
   }
 }
 
-void PdfParser::fillPatch(GfxPatch *patch, int nComps, int depth) {
+void PdfParser::fillPatch(_POPPLER_CONST GfxPatch *patch, int nComps, int depth) {
   GfxPatch patch00 = blankPatch();
   GfxPatch patch01 = blankPatch();
   GfxPatch patch10 = blankPatch();
@@ -2189,13 +2180,13 @@ void PdfParser::fillPatch(GfxPatch *patch, int nComps, int depth) {
   int i;
 
   for (i = 0; i < nComps; ++i) {
-    if (abs(patch->color[0][0].c[i] - patch->color[0][1].c[i])
+    if (std::abs(patch->color[0][0].c[i] - patch->color[0][1].c[i])
 	  > patchColorDelta ||
-	abs(patch->color[0][1].c[i] - patch->color[1][1].c[i])
+	std::abs(patch->color[0][1].c[i] - patch->color[1][1].c[i])
 	  > patchColorDelta ||
-	abs(patch->color[1][1].c[i] - patch->color[1][0].c[i])
+	std::abs(patch->color[1][1].c[i] - patch->color[1][0].c[i])
 	  > patchColorDelta ||
-	abs(patch->color[1][0].c[i] - patch->color[0][0].c[i])
+	std::abs(patch->color[1][0].c[i] - patch->color[0][0].c[i])
 	  > patchColorDelta) {
       break;
     }
@@ -2375,7 +2366,7 @@ void PdfParser::opSetFont(Object args[], int /*numArgs*/)
   if (!font) {
     // unsetting the font (drawing no text) is better than using the
     // previous one and drawing random glyphs from it
-    state->setFont(NULL, args[1].getNum());
+    state->setFont(nullptr, args[1].getNum());
     fontChanged = gTrue;
     return;
   }
@@ -2540,7 +2531,7 @@ void PdfParser::opMoveSetShowText(Object args[], int /*numArgs*/)
 // TODO not good that numArgs is ignored but args[] is used:
 void PdfParser::opShowSpaceText(Object args[], int /*numArgs*/)
 {
-  Array *a = 0;
+  Array *a = nullptr;
   Object obj;
   int wMode = 0;
 
@@ -2582,29 +2573,37 @@ void PdfParser::opShowSpaceText(Object args[], int /*numArgs*/)
   }
 }
 
+#if POPPLER_CHECK_VERSION(0,64,0)
+void PdfParser::doShowText(const GooString *s) {
+#else
 void PdfParser::doShowText(GooString *s) {
+#endif
   GfxFont *font;
   int wMode;
   double riseX, riseY;
   CharCode code;
-  Unicode *u = NULL;
+  Unicode *u = nullptr;
   double x, y, dx, dy, tdx, tdy;
   double originX, originY, tOriginX, tOriginY;
   double oldCTM[6], newCTM[6];
-  double *mat;
+  const double *mat;
   Object charProc;
   Dict *resDict;
   Parser *oldParser;
+#if POPPLER_CHECK_VERSION(0,64,0)
+  const char *p;
+#else
   char *p;
+#endif
   int len, n, uLen;
 
   font = state->getFont();
   wMode = font->getWMode();
 
-  builder->beginString(state, s);
+  builder->beginString(state);
 
   // handle a Type 3 char
-  if (font->getType() == fontType3 && 0) {//out->interpretType3Chars()) {
+  if (font->getType() == fontType3 && false) {//out->interpretType3Chars()) {
     mat = state->getCTM();
     for (int i = 0; i < 6; ++i) {
       oldCTM[i] = mat[i];
@@ -2649,7 +2648,7 @@ void PdfParser::doShowText(GooString *s) {
       state->setCTM(newCTM[0], newCTM[1], newCTM[2], newCTM[3], x, y);
       //~ the CTM concat values here are wrong (but never used)
       //out->updateCTM(state, 1, 0, 0, 1, 0, 0);
-      if (0){ /*!out->beginType3Char(state, curX + riseX, curY + riseY, tdx, tdy,
+      if (false){ /*!out->beginType3Char(state, curX + riseX, curY + riseY, tdx, tdy,
 			       code, u, uLen)) {*/
 #if defined(POPPLER_NEW_OBJECT_API)
 	charProc = ((Gfx8BitFont *)font)->getCharProc(code);
@@ -2732,7 +2731,11 @@ void PdfParser::opXObject(Object args[], int /*numArgs*/)
 {
   Object obj1, obj2, obj3, refObj;
 
+#if POPPLER_CHECK_VERSION(0,64,0)
+  const char *name = args[0].getName();
+#else
   char *name = args[0].getName();
+#endif
 #if defined(POPPLER_NEW_OBJECT_API)
   if ((obj1 = res->lookupXObject(name)).isNull()) {
 #else
@@ -3010,7 +3013,7 @@ void PdfParser::doImage(Object * /*ref*/, Stream *str, GBool inlineImg)
         }
         if (!obj1.isNull()) {
 #if defined(POPPLER_EVEN_NEWER_NEW_COLOR_SPACE_API)
-            colorSpace = GfxColorSpace::parse(NULL, &obj1, NULL, NULL);
+            colorSpace = GfxColorSpace::parse(nullptr, &obj1, nullptr, nullptr);
 #elif defined(POPPLER_EVEN_NEWER_COLOR_SPACE_API)
             colorSpace = GfxColorSpace::parse(&obj1, NULL, NULL);
 #else
@@ -3023,7 +3026,7 @@ void PdfParser::doImage(Object * /*ref*/, Stream *str, GBool inlineImg)
         } else if (csMode == streamCSDeviceCMYK) {
             colorSpace = new GfxDeviceCMYKColorSpace();
         } else {
-            colorSpace = NULL;
+            colorSpace = nullptr;
         }
 #if !defined(POPPLER_NEW_OBJECT_API)
         obj1.free();
@@ -3056,11 +3059,11 @@ void PdfParser::doImage(Object * /*ref*/, Stream *str, GBool inlineImg)
         // get the mask
         int maskColors[2*gfxColorMaxComps];
         haveColorKeyMask = haveExplicitMask = haveSoftMask = gFalse;
-        Stream *maskStr = NULL;
+        Stream *maskStr = nullptr;
         int maskWidth = 0;
         int maskHeight = 0;
         maskInvert = gFalse;
-        GfxImageColorMap *maskColorMap = NULL;
+        GfxImageColorMap *maskColorMap = nullptr;
 #if defined(POPPLER_NEW_OBJECT_API)
         maskObj = dict->lookup(const_cast<char*>("Mask"));
         smaskObj = dict->lookup(const_cast<char*>("SMask"));
@@ -3181,7 +3184,7 @@ void PdfParser::doImage(Object * /*ref*/, Stream *str, GBool inlineImg)
 	            }
             }
 #if defined(POPPLER_EVEN_NEWER_NEW_COLOR_SPACE_API)
-            GfxColorSpace *maskColorSpace = GfxColorSpace::parse(NULL, &obj1, NULL, NULL);
+            GfxColorSpace *maskColorSpace = GfxColorSpace::parse(nullptr, &obj1, nullptr, nullptr);
 #elif defined(POPPLER_EVEN_NEWER_COLOR_SPACE_API)
             GfxColorSpace *maskColorSpace = GfxColorSpace::parse(&obj1, NULL, NULL);
 #else
@@ -3356,7 +3359,7 @@ void PdfParser::doImage(Object * /*ref*/, Stream *str, GBool inlineImg)
 				maskStr, maskWidth, maskHeight, maskInvert, maskInterpolate);
         } else {
 	    builder->addImage(state, str, width, height, colorMap, interpolate,
-		        haveColorKeyMask ? maskColors : static_cast<int *>(NULL));
+		        haveColorKeyMask ? maskColors : static_cast<int *>(nullptr));
         }
         delete colorMap;
         
@@ -3469,11 +3472,11 @@ void PdfParser::doForm(Object *str) {
 #else
   dict->lookup(const_cast<char*>("Resources"), &resObj);
 #endif
-  resDict = resObj.isDict() ? resObj.getDict() : (Dict *)NULL;
+  resDict = resObj.isDict() ? resObj.getDict() : (Dict *)nullptr;
 
   // check for a transparency group
   transpGroup = isolated = knockout = gFalse;
-  blendingColorSpace = NULL;
+  blendingColorSpace = nullptr;
 #if defined(POPPLER_NEW_OBJECT_API)
   if ((obj1 = dict->lookup(const_cast<char*>("Group"))).isDict()) {
     if ((obj2 = obj1.dictLookup(const_cast<char*>("S"))).isName(const_cast<char*>("Transparency"))) {
@@ -3488,7 +3491,7 @@ void PdfParser::doForm(Object *str) {
       if (!obj1.dictLookup(const_cast<char*>("CS"), &obj3)->isNull()) {
 #endif
 #if defined(POPPLER_EVEN_NEWER_NEW_COLOR_SPACE_API)
-	blendingColorSpace = GfxColorSpace::parse(NULL, &obj3, NULL, NULL);
+	blendingColorSpace = GfxColorSpace::parse(nullptr, &obj3, nullptr, nullptr);
 #elif defined(POPPLER_EVEN_NEWER_COLOR_SPACE_API)
 	blendingColorSpace = GfxColorSpace::parse(&obj3, NULL, NULL);
 #else
@@ -3638,10 +3641,9 @@ void PdfParser::opBeginImage(Object /*args*/[], int /*numArgs*/)
 {
   // build dict/stream
   Stream *str = buildImageStream();
-
   // display the image
   if (str) {
-    doImage(NULL, str, gTrue);
+    doImage(nullptr, str, gTrue);
   
     // skip 'EI' tag
     int c1 = str->getUndecodedStream()->getChar();
@@ -3657,7 +3659,6 @@ void PdfParser::opBeginImage(Object /*args*/[], int /*numArgs*/)
 Stream *PdfParser::buildImageStream() {
   Object dict;
   Object obj;
-  char *key;
   Stream *str;
 
   // build dictionary
@@ -3675,26 +3676,17 @@ Stream *PdfParser::buildImageStream() {
       obj.free();
 #endif
     } else {
-      key = copyString(obj.getName());
-#if defined(POPPLER_NEW_OBJECT_API)
-      obj = parser->getObj();
-#else
-      obj.free();
-      parser->getObj(&obj);
-#endif
-      if (obj.isEOF() || obj.isError()) {
-	gfree(key);
+      Object obj2;
+      _POPPLER_CALL(obj2, parser->getObj);
+      if (obj2.isEOF() || obj2.isError()) {
+        _POPPLER_FREE(obj);
 	break;
       }
-#if defined(POPPLER_NEW_OBJECT_API)
-      dict.dictAdd(key, std::move(obj));
-    }
-    obj = parser->getObj();
-#else
-      dict.dictAdd(key, &obj);
+      _POPPLER_DICTADD(dict, obj.getName(), obj2);
+      _POPPLER_FREE(obj);
+      _POPPLER_FREE(obj2);
     }
-    parser->getObj(&obj);
-#endif
+    _POPPLER_CALL(obj, parser->getObj);
   }
   if (obj.isEOF()) {
     error(errSyntaxError, getPos(), "End of file in inline image");
@@ -3702,7 +3694,7 @@ Stream *PdfParser::buildImageStream() {
     obj.free();
     dict.free();
 #endif
-    return NULL;
+    return nullptr;
   }
 #if !defined(POPPLER_NEW_OBJECT_API)
   obj.free();
@@ -3807,7 +3799,7 @@ void PdfParser::saveState() {
   bool is_radial = false;
 
   GfxPattern *pattern = state->getFillPattern();
-  if (pattern != NULL)
+  if (pattern != nullptr)
     if (pattern->getType() == 2 ) {
         GfxShadingPattern *shading_pattern = static_cast<GfxShadingPattern *>(pattern);
         GfxShading *shading = shading_pattern->getShading();
@@ -3862,8 +3854,8 @@ void PdfParser::setApproximationPrecision(int shadingType, double colorDelta,
 //------------------------------------------------------------------------
 
 ClipHistoryEntry::ClipHistoryEntry(GfxPath *clipPathA, GfxClipType clipTypeA) :
-  saved(NULL),
-  clipPath((clipPathA) ? clipPathA->copy() : NULL),
+  saved(nullptr),
+  clipPath((clipPathA) ? clipPathA->copy() : nullptr),
   clipType(clipTypeA)
 {
 }
@@ -3872,7 +3864,7 @@ ClipHistoryEntry::~ClipHistoryEntry()
 {
     if (clipPath) {
         delete clipPath;
-	clipPath = NULL;
+	clipPath = nullptr;
     }
 }
 
@@ -3885,7 +3877,7 @@ void ClipHistoryEntry::setClip(GfxPath *clipPathA, GfxClipType clipTypeA) {
         clipPath = clipPathA->copy();
         clipType = clipTypeA;
     } else {
-        clipPath = NULL;
+        clipPath = nullptr;
 	clipType = clipNormal;
     }
 }
@@ -3902,7 +3894,7 @@ ClipHistoryEntry *ClipHistoryEntry::restore() {
 
     if (saved) {
         oldEntry = saved;
-        saved = NULL;
+        saved = nullptr;
         delete this; // TODO really should avoid deleting from inside.
     } else {
         oldEntry = this;
@@ -3916,10 +3908,10 @@ ClipHistoryEntry::ClipHistoryEntry(ClipHistoryEntry *other) {
         this->clipPath = other->clipPath->copy();
         this->clipType = other->clipType;
     } else {
-        this->clipPath = NULL;
+        this->clipPath = nullptr;
 	this->clipType = clipNormal;
     }
-    saved = NULL;
+    saved = nullptr;
 }
 
 #endif /* HAVE_POPPLER */





diff --git a/src/extension/internal/pdfinput/pdf-parser.h b/src/extension/internal/pdfinput/pdf-parser.h
index e28fecc..17eb025 100644
--- a/src/extension/internal/pdfinput/pdf-parser.h
+++ b/src/extension/internal/pdfinput/pdf-parser.h
@@ -9,6 +9,7 @@
 #define PDF_PARSER_H

 #ifdef HAVE_POPPLER
+#include "poppler-transition-api.h"

 #ifdef USE_GCC_PRAGMAS
 #pragma interface
@@ -25,6 +26,7 @@ namespace Inkscape {
 // TODO clean up and remove using:
 using Inkscape::Extension::Internal::SvgBuilder;

+#include "glib/poppler-features.h"
 #include "goo/gtypes.h"
 #include "Object.h"

@@ -127,11 +129,14 @@ class PdfParser {

   // Constructor for regular output.
   PdfParser(XRef *xrefA, SvgBuilder *builderA, int pageNum, int rotate,
-            Dict *resDict, PDFRectangle *box, PDFRectangle *cropBox);
+            Dict *resDict,
+            _POPPLER_CONST PDFRectangle *box,
+            _POPPLER_CONST PDFRectangle *cropBox);

   // Constructor for a sub-page object.
   PdfParser(XRef *xrefA, Inkscape::Extension::Internal::SvgBuilder *builderA,
-            Dict *resDict, PDFRectangle *box);
+            Dict *resDict,
+            _POPPLER_CONST PDFRectangle *box);

   virtual ~PdfParser();

@@ -185,7 +190,7 @@ class PdfParser {

   void go(GBool topLevel);
   void execOp(Object *cmd, Object args[], int numArgs);
-  PdfOperator *findOp(char *name);
+  PdfOperator *findOp(const char *name);
   GBool checkArg(Object *arg, TchkType type);
   int getPos();

@@ -256,7 +261,7 @@ class PdfParser {
 			   double x2, double y2, GfxColor *color2,
 			   int nComps, int depth);
   void doPatchMeshShFill(GfxPatchMeshShading *shading);
-  void fillPatch(GfxPatch *patch, int nComps, int depth);
+  void fillPatch(_POPPLER_CONST GfxPatch *patch, int nComps, int depth);
   void doEndPath();

   // path clipping operators
@@ -287,7 +292,12 @@ class PdfParser {
   void opMoveShowText(Object args[], int numArgs);
   void opMoveSetShowText(Object args[], int numArgs);
   void opShowSpaceText(Object args[], int numArgs);
+#if POPPLER_CHECK_VERSION(0,64,0)
+  void doShowText(const GooString *s);
+#else
   void doShowText(GooString *s);
+#endif
+

   // XObject operators
   void opXObject(Object args[], int numArgs);
@@ -295,10 +305,10 @@ class PdfParser {
   void doForm(Object *str);
   void doForm1(Object *str, Dict *resDict, double *matrix, double *bbox,
 	       GBool transpGroup = gFalse, GBool softMask = gFalse,
-	       GfxColorSpace *blendingColorSpace = NULL,
+	       GfxColorSpace *blendingColorSpace = nullptr,
 	       GBool isolated = gFalse, GBool knockout = gFalse,
-	       GBool alpha = gFalse, Function *transferFunc = NULL,
-	       GfxColor *backdropColor = NULL);
+	       GBool alpha = gFalse, Function *transferFunc = nullptr,
+	       GfxColor *backdropColor = nullptr);

   // in-line image operators
   void opBeginImage(Object args[], int numArgs);





diff --git a/src/extension/internal/pdfinput/svg-builder.cpp b/src/extension/internal/pdfinput/svg-builder.cpp
index a448be6..a59397a 100644
--- a/src/extension/internal/pdfinput/svg-builder.cpp
+++ b/src/extension/internal/pdfinput/svg-builder.cpp
@@ -38,6 +38,7 @@
 #include "io/base64stream.h"
 #include "display/nr-filter-utils.h"
 #include "libnrtype/font-instance.h"
+#include "object/sp-defs.h"

 #include "Function.h"
 #include "GfxState.h"
@@ -104,18 +105,17 @@ SvgBuilder::SvgBuilder(SvgBuilder *parent, Inkscape::XML::Node *root) {
     _init();
 }

-SvgBuilder::~SvgBuilder() {
-}
+SvgBuilder::~SvgBuilder() = default;

 void SvgBuilder::_init() {
-    _font_style = NULL;
-    _current_font = NULL;
-    _font_specification = NULL;
+    _font_style = nullptr;
+    _current_font = nullptr;
+    _font_specification = nullptr;
     _font_scaling = 1;
     _need_font_update = true;
     _in_text_object = false;
     _invalidated_style = true;
-    _current_state = NULL;
+    _current_state = nullptr;
     _width = 0;
     _height = 0;

@@ -124,12 +124,12 @@ void SvgBuilder::_init() {
     font_factory::Default()->GetUIFamilies(families);
     for ( std::vector<PangoFontFamily *>::iterator iter = families.begin();
           iter != families.end(); ++iter ) {
-        _availableFontNames.push_back(pango_font_family_get_name(*iter));
+        _availableFontNames.emplace_back(pango_font_family_get_name(*iter));
     }

-    _transp_group_stack = NULL;
+    _transp_group_stack = nullptr;
     SvgGraphicsState initial_state;
-    initial_state.softmask = NULL;
+    initial_state.softmask = nullptr;
     initial_state.group_depth = 0;
     _state_stack.push_back(initial_state);
     _node_stack.push_back(_container);
@@ -185,7 +185,7 @@ Inkscape::XML::Node *SvgBuilder::pushNode(const char *name) {
 }

 Inkscape::XML::Node *SvgBuilder::popNode() {
-    Inkscape::XML::Node *node = NULL;
+    Inkscape::XML::Node *node = nullptr;
     if ( _node_stack.size() > 1 ) {
         node = _node_stack.back();
         _node_stack.pop_back();
@@ -214,7 +214,7 @@ Inkscape::XML::Node *SvgBuilder::pushGroup() {
             setAsLayer(_docname);
         }
     }
-    if (_container->parent()->attribute("inkscape:groupmode") != NULL) {
+    if (_container->parent()->attribute("inkscape:groupmode") != nullptr) {
         _ttm[0] = _ttm[3] = 1.0;    // clear ttm if parent is a layer
         _ttm[1] = _ttm[2] = _ttm[4] = _ttm[5] = 0.0;
         _ttm_is_set = false;
@@ -378,7 +378,7 @@ void SvgBuilder::_setStrokeStyle(SPCSSAttr *css, GfxState *state) {
         sp_repr_css_set_property(css, "stroke-dashoffset", os_offset.str().c_str());
     } else {
         sp_repr_css_set_property(css, "stroke-dasharray", "none");
-        sp_repr_css_set_property(css, "stroke-dashoffset", NULL);
+        sp_repr_css_set_property(css, "stroke-dashoffset", nullptr);
     }
 }

@@ -502,7 +502,7 @@ void SvgBuilder::addShadedFill(GfxShading *shading, double *matrix, GfxPath *pat
             SPObject *clip_obj = _doc->getObjectById(clip_path_id);
             if (clip_obj) {
                 clip_obj->deleteObject();
-                node->setAttribute("clip-path", NULL);
+                node->setAttribute("clip-path", nullptr);
                 TRACE(("removed clipping path: %s\n", clip_path_id));
             }
             break;
@@ -569,7 +569,7 @@ bool SvgBuilder::getTransform(double *transform) {
 void SvgBuilder::setTransform(double c0, double c1, double c2, double c3,
                               double c4, double c5) {
     // do not remember the group which is a layer
-    if ((_container->attribute("inkscape:groupmode") == NULL) && !_ttm_is_set) {
+    if ((_container->attribute("inkscape:groupmode") == nullptr) && !_ttm_is_set) {
         _ttm[0] = c0;
         _ttm[1] = c1;
         _ttm[2] = c2;
@@ -580,7 +580,7 @@ void SvgBuilder::setTransform(double c0, double c1, double c2, double c3,
     }

     // Avoid transforming a group with an already set clip-path
-    if ( _container->attribute("clip-path") != NULL ) {
+    if ( _container->attribute("clip-path") != nullptr ) {
         pushGroup();
     }
     TRACE(("setTransform: %f %f %f %f %f %f\n", c0, c1, c2, c3, c4, c5));
@@ -597,7 +597,7 @@ void SvgBuilder::setTransform(double const *transform) {
  * Used by PdfParser to decide when to do fallback operations.
  */
 bool SvgBuilder::isPatternTypeSupported(GfxPattern *pattern) {
-    if ( pattern != NULL ) {
+    if ( pattern != nullptr ) {
         if ( pattern->getType() == 2 ) {    // shading pattern
             GfxShading *shading = (static_cast<GfxShadingPattern *>(pattern))->getShading();
             int shadingType = shading->getType();
@@ -618,14 +618,14 @@ bool SvgBuilder::isPatternTypeSupported(GfxPattern *pattern) {
  * \brief Creates a pattern from poppler's data structure
  * Handles linear and radial gradients. Creates a new PdfParser and uses it to
  * build a tiling pattern.
- * \return an url pointing to the created pattern
+ * \return a url pointing to the created pattern
  */
 gchar *SvgBuilder::_createPattern(GfxPattern *pattern, GfxState *state, bool is_stroke) {
-    gchar *id = NULL;
-    if ( pattern != NULL ) {
+    gchar *id = nullptr;
+    if ( pattern != nullptr ) {
         if ( pattern->getType() == 2 ) {  // Shading pattern
             GfxShadingPattern *shading_pattern = static_cast<GfxShadingPattern *>(pattern);
-            double *ptm;
+            const double *ptm;
             double m[6] = {1, 0, 0, 1, 0, 0};
             double det;

@@ -655,7 +655,7 @@ gchar *SvgBuilder::_createPattern(GfxPattern *pattern, GfxState *state, bool is_
             id = _createTilingPattern(static_cast<GfxTilingPattern*>(pattern), state, is_stroke);
         }
     } else {
-        return NULL;
+        return nullptr;
     }
     gchar *urltext = g_strdup_printf ("url(#%s)", id);
     g_free(id);
@@ -672,7 +672,7 @@ gchar *SvgBuilder::_createTilingPattern(GfxTilingPattern *tiling_pattern,

     Inkscape::XML::Node *pattern_node = _xml_doc->createElement("svg:pattern");
     // Set pattern transform matrix
-    double *p2u = tiling_pattern->getMatrix();
+    const double *p2u = tiling_pattern->getMatrix();
     double m[6] = {1, 0, 0, 1, 0, 0};
     double det;
     det = _ttm[0] * _ttm[3] - _ttm[1] * _ttm[2];    // see LP Bug 1168908
@@ -698,7 +698,7 @@ gchar *SvgBuilder::_createTilingPattern(GfxTilingPattern *tiling_pattern,
     pattern_node->setAttribute("patternUnits", "userSpaceOnUse");
     // Set pattern tiling
     // FIXME: don't ignore XStep and YStep
-    double *bbox = tiling_pattern->getBBox();
+    const double *bbox = tiling_pattern->getBBox();
     sp_repr_set_svg_double(pattern_node, "x", 0.0);
     sp_repr_set_svg_double(pattern_node, "y", 0.0);
     sp_repr_set_svg_double(pattern_node, "width", bbox[2] - bbox[0]);
@@ -718,7 +718,7 @@ gchar *SvgBuilder::_createTilingPattern(GfxTilingPattern *tiling_pattern,
     GfxPatternColorSpace *pat_cs = (GfxPatternColorSpace *)( is_stroke ? state->getStrokeColorSpace()
                                                             : state->getFillColorSpace() );
     // Set fill/stroke colors if this is an uncolored tiling pattern
-    GfxColorSpace *cs = NULL;
+    GfxColorSpace *cs = nullptr;
     if ( tiling_pattern->getPaintType() == 2 && ( cs = pat_cs->getUnder() ) ) {
         GfxState *pattern_state = pdf_parser->getState();
         pattern_state->setFillColorSpace(cs->copy());
@@ -751,7 +751,7 @@ gchar *SvgBuilder::_createTilingPattern(GfxTilingPattern *tiling_pattern,
  */
 gchar *SvgBuilder::_createGradient(GfxShading *shading, double *matrix, bool for_shading) {
     Inkscape::XML::Node *gradient;
-    Function *func;
+    _POPPLER_CONST Function *func;
     int num_funcs;
     bool extend0, extend1;

@@ -784,7 +784,7 @@ gchar *SvgBuilder::_createGradient(GfxShading *shading, double *matrix, bool for
         num_funcs = radial_shading->getNFuncs();
         func = radial_shading->getFunc(0);
     } else {    // Unsupported shading type
-        return NULL;
+        return nullptr;
     }
     gradient->setAttribute("gradientUnits", "userSpaceOnUse");
     // If needed, flip the gradient transform around the y axis
@@ -806,7 +806,7 @@ gchar *SvgBuilder::_createGradient(GfxShading *shading, double *matrix, bool for

     if ( num_funcs > 1 || !_addGradientStops(gradient, shading, func) ) {
         Inkscape::GC::release(gradient);
-        return NULL;
+        return nullptr;
     }

     Inkscape::XML::Node *defs = _doc->getDefs()->getRepr();
@@ -826,8 +826,8 @@ void SvgBuilder::_addStopToGradient(Inkscape::XML::Node *gradient, double offset
     Inkscape::XML::Node *stop = _xml_doc->createElement("svg:stop");
     SPCSSAttr *css = sp_repr_css_attr_new();
     Inkscape::CSSOStringStream os_opacity;
-    gchar *color_text = NULL;
-    if ( _transp_group_stack != NULL && _transp_group_stack->for_softmask ) {
+    gchar *color_text = nullptr;
+    if ( _transp_group_stack != nullptr && _transp_group_stack->for_softmask ) {
         double gray = (double)color->r / 65535.0;
         gray = CLAMP(gray, 0.0, 1.0);
         os_opacity << gray;
@@ -865,7 +865,7 @@ static bool svgGetShadingColorRGB(GfxShading *shading, double offset, GfxRGB *re

 #define INT_EPSILON 8
 bool SvgBuilder::_addGradientStops(Inkscape::XML::Node *gradient, GfxShading *shading,
-                                   Function *func) {
+                                   _POPPLER_CONST Function *func) {
     int type = func->getType();
     if ( type == 0 || type == 2 ) {  // Sampled or exponential function
         GfxRGB stop1, stop2;
@@ -877,9 +877,9 @@ bool SvgBuilder::_addGradientStops(Inkscape::XML::Node *gradient, GfxShading *sh
             _addStopToGradient(gradient, 1.0, &stop2, 1.0);
         }
     } else if ( type == 3 ) { // Stitching
-        StitchingFunction *stitchingFunc = static_cast<StitchingFunction*>(func);
-        double *bounds = stitchingFunc->getBounds();
-        double *encode = stitchingFunc->getEncode();
+        auto stitchingFunc = static_cast<_POPPLER_CONST StitchingFunction*>(func);
+        const double *bounds = stitchingFunc->getBounds();
+        const double *encode = stitchingFunc->getEncode();
         int num_funcs = stitchingFunc->getNumFuncs();

         // Add stops from all the stitched functions
@@ -890,7 +890,7 @@ bool SvgBuilder::_addGradientStops(Inkscape::XML::Node *gradient, GfxShading *sh
             svgGetShadingColorRGB(shading, bounds[i + 1], &color);
             // Add stops
             if (stitchingFunc->getFunc(i)->getType() == 2) {    // process exponential fxn
-                double expE = (static_cast<ExponentialFunction*>(stitchingFunc->getFunc(i)))->getE();
+                double expE = (static_cast<_POPPLER_CONST ExponentialFunction*>(stitchingFunc->getFunc(i)))->getE();
                 if (expE > 1.0) {
                     expE = (bounds[i + 1] - bounds[i])/expE;    // approximate exponential as a single straight line at x=1
                     if (encode[2*i] == 0) {    // normal sequence
@@ -1022,22 +1022,22 @@ void SvgBuilder::updateFont(GfxState *state) {
     if (font->getName()) {
         _font_specification = font->getName()->getCString();
     } else {
-        _font_specification = (char*) "Arial";
+        _font_specification = "Arial";
     }

     // Prune the font name to get the correct font family name
     // In a PDF font names can look like this: IONIPB+MetaPlusBold-Italic
-    char *font_family = NULL;
-    char *font_style = NULL;
-    char *font_style_lowercase = NULL;
-    char *plus_sign = strstr(_font_specification, "+");
+    char *font_family = nullptr;
+    char *font_style = nullptr;
+    char *font_style_lowercase = nullptr;
+    const char *plus_sign = strstr(_font_specification, "+");
     if (plus_sign) {
         font_family = g_strdup(plus_sign + 1);
         _font_specification = plus_sign + 1;
     } else {
         font_family = g_strdup(_font_specification);
     }
-    char *style_delim = NULL;
+    char *style_delim = nullptr;
     if ( ( style_delim = g_strrstr(font_family, "-") ) ||
          ( style_delim = g_strrstr(font_family, ",") ) ) {
         font_style = style_delim + 1;
@@ -1076,7 +1076,7 @@ void SvgBuilder::updateFont(GfxState *state) {

     // Font weight
     GfxFont::Weight font_weight = font->getWeight();
-    char *css_font_weight = NULL;
+    char *css_font_weight = nullptr;
     if ( font_weight != GfxFont::WeightNotDefined ) {
         if ( font_weight == GfxFont::W400 ) {
             css_font_weight = (char*) "normal";
@@ -1108,7 +1108,7 @@ void SvgBuilder::updateFont(GfxState *state) {

     // Font stretch
     GfxFont::Stretch font_stretch = font->getStretch();
-    gchar *stretch_value = NULL;
+    gchar *stretch_value = nullptr;
     switch (font_stretch) {
         case GfxFont::UltraCondensed:
             stretch_value = (char*) "ultra-condensed";
@@ -1140,7 +1140,7 @@ void SvgBuilder::updateFont(GfxState *state) {
         default:
             break;
     }
-    if ( stretch_value != NULL ) {
+    if ( stretch_value != nullptr ) {
         sp_repr_css_set_property(_font_style, "font-stretch", stretch_value);
     }

@@ -1148,7 +1148,7 @@ void SvgBuilder::updateFont(GfxState *state) {
     Inkscape::CSSOStringStream os_font_size;
     double css_font_size = _font_scaling * state->getFontSize();
     if ( font->getType() == fontType3 ) {
-        double *font_matrix = font->getFontMatrix();
+        const double *font_matrix = font->getFontMatrix();
         if ( font_matrix[0] != 0.0 ) {
             css_font_size *= font_matrix[3] / font_matrix[0];
         }
@@ -1193,7 +1193,7 @@ void SvgBuilder::updateTextPosition(double tx, double ty) {
 void SvgBuilder::updateTextMatrix(GfxState *state) {
     _flushText();
     // Update text matrix
-    double *text_matrix = state->getTextMat();
+    const double *text_matrix = state->getTextMat();
     double w_scale = sqrt( text_matrix[0] * text_matrix[0] + text_matrix[2] * text_matrix[2] );
     double h_scale = sqrt( text_matrix[1] * text_matrix[1] + text_matrix[3] * text_matrix[3] );
     double max_scale;
@@ -1249,13 +1249,13 @@ void SvgBuilder::_flushText() {
     bool same_coords[2] = {true, true};
     Geom::Point last_delta_pos;
     unsigned int glyphs_in_a_row = 0;
-    Inkscape::XML::Node *tspan_node = NULL;
+    Inkscape::XML::Node *tspan_node = nullptr;
     Glib::ustring x_coords;
     Glib::ustring y_coords;
     Glib::ustring text_buffer;

     // Output all buffered glyphs
-    while (1) {
+    while (true) {
         const SvgGlyph& glyph = (*i);
         std::vector<SvgGlyph>::iterator prev_iterator = i - 1;
         // Check if we need to make a new tspan
@@ -1361,7 +1361,7 @@ void SvgBuilder::_flushText() {
     _glyphs.clear();
 }

-void SvgBuilder::beginString(GfxState *state, GooString * /*s*/) {
+void SvgBuilder::beginString(GfxState *state) {
     if (_need_font_update) {
         updateFont(state);
     }
@@ -1414,7 +1414,7 @@ void SvgBuilder::addChar(GfxState *state, double x, double y,
             uu[i] = u[i];
         }

-        gchar *tmp = g_utf16_to_utf8(uu, uLen, NULL, NULL, NULL);
+        gchar *tmp = g_utf16_to_utf8(uu, uLen, nullptr, nullptr, nullptr);
         if ( tmp && *tmp ) {
             new_glyph.code = tmp;
         } else {
@@ -1491,20 +1491,20 @@ Inkscape::XML::Node *SvgBuilder::_createImage(Stream *str, int width, int height
                                               bool invert_alpha) {

     // Create PNG write struct
-    png_structp png_ptr = png_create_write_struct(PNG_LIBPNG_VER_STRING, NULL, NULL, NULL);
-    if ( png_ptr == NULL ) {
-        return NULL;
+    png_structp png_ptr = png_create_write_struct(PNG_LIBPNG_VER_STRING, nullptr, nullptr, nullptr);
+    if ( png_ptr == nullptr ) {
+        return nullptr;
     }
     // Create PNG info struct
     png_infop info_ptr = png_create_info_struct(png_ptr);
-    if ( info_ptr == NULL ) {
-        png_destroy_write_struct(&png_ptr, NULL);
-        return NULL;
+    if ( info_ptr == nullptr ) {
+        png_destroy_write_struct(&png_ptr, nullptr);
+        return nullptr;
     }
     // Set error handler
     if (setjmp(png_jmpbuf(png_ptr))) {
         png_destroy_write_struct(&png_ptr, &info_ptr);
-        return NULL;
+        return nullptr;
     }
     // Decide whether we should embed this image
     int attr_value = 1;
@@ -1513,8 +1513,8 @@ Inkscape::XML::Node *SvgBuilder::_createImage(Stream *str, int width, int height
     // Set read/write functions
     Inkscape::IO::StringOutputStream base64_string;
     Inkscape::IO::Base64OutputStream base64_stream(base64_string);
-    FILE *fp = NULL;
-    gchar *file_name = NULL;
+    FILE *fp = nullptr;
+    gchar *file_name = nullptr;
     if (embed_image) {
         base64_stream.setColumnWidth(0);   // Disable line breaks
         png_set_write_fn(png_ptr, &base64_stream, png_write_base64stream, png_flush_base64stream);
@@ -1522,10 +1522,10 @@ Inkscape::XML::Node *SvgBuilder::_createImage(Stream *str, int width, int height
         static int counter = 0;
         file_name = g_strdup_printf("%s_img%d.png", _docname, counter++);
         fp = fopen(file_name, "wb");
-        if ( fp == NULL ) {
+        if ( fp == nullptr ) {
             png_destroy_write_struct(&png_ptr, &info_ptr);
             g_free(file_name);
-            return NULL;
+            return nullptr;
         }
         png_init_io(png_ptr, fp);
     }
@@ -1645,7 +1645,7 @@ Inkscape::XML::Node *SvgBuilder::_createImage(Stream *str, int width, int height
             fclose(fp);
             g_free(file_name);
         }
-        return NULL;
+        return nullptr;
     }
     delete image_stream;
     str->close();
@@ -1711,7 +1711,7 @@ Inkscape::XML::Node *SvgBuilder::_createMask(double width, double height) {
         if ( !( defs && !strcmp(defs->name(), "svg:defs") ) ) {
             // Create <defs> node
             defs = _xml_doc->createElement("svg:defs");
-            _root->addChild(defs, NULL);
+            _root->addChild(defs, nullptr);
             Inkscape::GC::release(defs);
             defs = _root->firstChild();
         }
@@ -1753,12 +1753,12 @@ void SvgBuilder::addImageMask(GfxState *state, Stream *str, int width, int heigh
     // Scaling 1x1 surfaces might not work so skip setting a mask with this size
     if ( width > 1 || height > 1 ) {
         Inkscape::XML::Node *mask_image_node =
-            _createImage(str, width, height, NULL, interpolate, NULL, true, invert);
+            _createImage(str, width, height, nullptr, interpolate, nullptr, true, invert);
         if (mask_image_node) {
             // Create the mask
             Inkscape::XML::Node *mask_node = _createMask(1.0, 1.0);
             // Remove unnecessary transformation from the mask image
-            mask_image_node->setAttribute("transform", NULL);
+            mask_image_node->setAttribute("transform", nullptr);
             mask_node->appendChild(mask_image_node);
             Inkscape::GC::release(mask_image_node);
             gchar *mask_url = g_strdup_printf("url(#%s)", mask_node->attribute("id"));
@@ -1778,13 +1778,13 @@ void SvgBuilder::addMaskedImage(GfxState * /*state*/, Stream *str, int width, in
                                 bool invert_mask, bool mask_interpolate) {

     Inkscape::XML::Node *mask_image_node = _createImage(mask_str, mask_width, mask_height,
-                                          NULL, mask_interpolate, NULL, true, invert_mask);
-    Inkscape::XML::Node *image_node = _createImage(str, width, height, color_map, interpolate, NULL);
+                                          nullptr, mask_interpolate, nullptr, true, invert_mask);
+    Inkscape::XML::Node *image_node = _createImage(str, width, height, color_map, interpolate, nullptr);
     if ( mask_image_node && image_node ) {
         // Create mask for the image
         Inkscape::XML::Node *mask_node = _createMask(1.0, 1.0);
         // Remove unnecessary transformation from the mask image
-        mask_image_node->setAttribute("transform", NULL);
+        mask_image_node->setAttribute("transform", nullptr);
         mask_node->appendChild(mask_image_node);
         // Scale the mask to the size of the image
         Geom::Affine mask_transform((double)width, 0.0, 0.0, (double)height, 0.0, 0.0);
@@ -1811,13 +1811,13 @@ void SvgBuilder::addSoftMaskedImage(GfxState * /*state*/, Stream *str, int width
                                     GfxImageColorMap *mask_color_map, bool mask_interpolate) {

     Inkscape::XML::Node *mask_image_node = _createImage(mask_str, mask_width, mask_height,
-                                                        mask_color_map, mask_interpolate, NULL, true);
-    Inkscape::XML::Node *image_node = _createImage(str, width, height, color_map, interpolate, NULL);
+                                                        mask_color_map, mask_interpolate, nullptr, true);
+    Inkscape::XML::Node *image_node = _createImage(str, width, height, color_map, interpolate, nullptr);
     if ( mask_image_node && image_node ) {
         // Create mask for the image
         Inkscape::XML::Node *mask_node = _createMask(1.0, 1.0);
         // Remove unnecessary transformation from the mask image
-        mask_image_node->setAttribute("transform", NULL);
+        mask_image_node->setAttribute("transform", nullptr);
         mask_node->appendChild(mask_image_node);
         // Set mask and add image
         gchar *mask_url = g_strdup_printf("url(#%s)", mask_node->attribute("id"));
@@ -1901,7 +1901,7 @@ void SvgBuilder::setSoftMask(GfxState * /*state*/, double * /*bbox*/, bool /*alp

 void SvgBuilder::clearSoftMask(GfxState * /*state*/) {
     if (_state_stack.back().softmask) {
-        _state_stack.back().softmask = NULL;
+        _state_stack.back().softmask = nullptr;
         popGroup();
     }
 }





diff --git a/src/extension/internal/pdfinput/svg-builder.h b/src/extension/internal/pdfinput/svg-builder.h
index ad15c9c..7fdb0b5 100644
--- a/src/extension/internal/pdfinput/svg-builder.h
+++ b/src/extension/internal/pdfinput/svg-builder.h
@@ -15,6 +15,7 @@
 #endif

 #ifdef HAVE_POPPLER
+#include "poppler-transition-api.h"

 class SPDocument;
 namespace Inkscape {
@@ -29,7 +30,6 @@ namespace Inkscape {
 #include <glibmm/ustring.h>

 #include "CharTypes.h"
-class GooString;
 class Function;
 class GfxState;
 struct GfxColor;
@@ -81,7 +81,7 @@ struct SvgGlyph {
     bool style_changed;  // Set to true if style has to be reset
     SPCSSAttr *style;
     int render_mode;    // Text render mode
-    char *font_specification;   // Pointer to current font specification
+    const char *font_specification;   // Pointer to current font specification
 };

 /**
@@ -95,7 +95,7 @@ class SvgBuilder {

     // Property setting
     void setDocumentSize(double width, double height);  // Document size in px
-    void setAsLayer(char *layer_name=NULL);
+    void setAsLayer(char *layer_name=nullptr);
     void setGroupOpacity(double opacity);
     Inkscape::XML::Node *getPreferences() {
         return _preferences;
@@ -136,7 +136,7 @@ class SvgBuilder {
     void clearSoftMask(GfxState *state);

     // Text handling
-    void beginString(GfxState *state, GooString *s);
+    void beginString(GfxState *state);
     void endString(GfxState *state);
     void addChar(GfxState *state, double x, double y,
                  double dx, double dy,
@@ -175,7 +175,7 @@ class SvgBuilder {
     void _addStopToGradient(Inkscape::XML::Node *gradient, double offset,
                             GfxRGB *color, double opacity);
     bool _addGradientStops(Inkscape::XML::Node *gradient, GfxShading *shading,
-                           Function *func);
+                           _POPPLER_CONST Function *func);
     gchar *_createTilingPattern(GfxTilingPattern *tiling_pattern, GfxState *state,
                                 bool is_stroke=false);
     // Image/mask creation
@@ -203,7 +203,7 @@ class SvgBuilder {

     SPCSSAttr *_font_style;          // Current font style
     GfxFont *_current_font;
-    char *_font_specification;
+    const char *_font_specification;
     double _font_scaling;
     bool _need_font_update;
     Geom::Affine _text_matrix;





diff --git a/src/extension/internal/pdfinput/poppler-transition-api.h b/src/extension/internal/pdfinput/poppler-transition-api.h
new file mode 100644
index 0000000..898e64b
--- /dev/null
+++ b/src/extension/internal/pdfinput/poppler-transition-api.h
@@ -0,0 +1,39 @@
+#ifndef SEEN_POPPLER_TRANSITION_API_H
+#define SEEN_POPPLER_TRANSITION_API_H
+
+#include <glib/poppler-features.h>
+
+#if POPPLER_CHECK_VERSION(0,70,0)
+#define _POPPLER_CONST const
+#else
+#define _POPPLER_CONST
+#endif
+
+#if POPPLER_CHECK_VERSION(0,69,0)
+#define _POPPLER_DICTADD(dict, key, obj) (dict).dictAdd(key, std::move(obj))
+#elif POPPLER_CHECK_VERSION(0,58,0)
+#define _POPPLER_DICTADD(dict, key, obj) (dict).dictAdd(copyString(key), std::move(obj))
+#else
+#define _POPPLER_DICTADD(dict, key, obj) (dict).dictAdd(copyString(key), &obj)
+#endif
+
+#if POPPLER_CHECK_VERSION(0,58,0)
+#define POPPLER_NEW_OBJECT_API
+#define _POPPLER_FREE(obj)
+#define _POPPLER_CALL(ret, func) (ret = func())
+#define _POPPLER_CALL_ARGS(ret, func, ...) (ret = func(__VA_ARGS__))
+#else
+#define _POPPLER_FREE(obj) (obj).free()
+#define _POPPLER_CALL(ret, func) (*func(&ret))
+#define _POPPLER_CALL_ARGS(ret, func, ...) (*func(__VA_ARGS__, &ret))
+#endif
+
+#if POPPLER_CHECK_VERSION(0, 29, 0)
+#define POPPLER_EVEN_NEWER_NEW_COLOR_SPACE_API
+#endif
+
+#if POPPLER_CHECK_VERSION(0, 25, 0)
+#define POPPLER_EVEN_NEWER_COLOR_SPACE_API
+#endif
+
+#endif




diff --git a/CMakeScripts/DefineDependsandFlags.cmake b/CMakeScripts/DefineDependsandFlags.cmake
index c33a3bf..fa67f67 100644
--- a/CMakeScripts/DefineDependsandFlags.cmake
+++ b/CMakeScripts/DefineDependsandFlags.cmake
@@ -116,18 +116,6 @@ if(ENABLE_POPPLER)
 		set(HAVE_POPPLER_GLIB ON)
 	    endif()
 	endif()
-	if(POPPLER_VERSION VERSION_GREATER "0.26.0" OR
-		POPPLER_VERSION VERSION_EQUAL   "0.26.0")
-	    set(POPPLER_EVEN_NEWER_COLOR_SPACE_API ON)
-	endif()
-	if(POPPLER_VERSION VERSION_GREATER "0.29.0" OR
-		POPPLER_VERSION VERSION_EQUAL   "0.29.0")
-	    set(POPPLER_EVEN_NEWER_NEW_COLOR_SPACE_API ON)
-	endif()
-	if(POPPLER_VERSION VERSION_GREATER "0.58.0" OR
-		POPPLER_VERSION VERSION_EQUAL   "0.58.0")
-            set(POPPLER_NEW_OBJECT_API ON)
-	endif()
     else()
 	set(ENABLE_POPPLER_CAIRO OFF)
     endif()
